"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[2132],{38974:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"web-applications/backend-api","title":"Documenting Backend API","description":"REST And Hateoas Implementation","source":"@site/docs/web-applications/backend-api.md","sourceDirName":"web-applications","slug":"/web-applications/backend-api","permalink":"/clematis.doc/docs/web-applications/backend-api","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"swagger","permalink":"/clematis.doc/docs/tags/swagger"},{"inline":true,"label":"openapi","permalink":"/clematis.doc/docs/tags/openapi"},{"inline":true,"label":"hateoas","permalink":"/clematis.doc/docs/tags/hateoas"},{"inline":true,"label":"rest","permalink":"/clematis.doc/docs/tags/rest"},{"inline":true,"label":"restdocs","permalink":"/clematis.doc/docs/tags/restdocs"},{"inline":true,"label":"rest-assured","permalink":"/clematis.doc/docs/tags/rest-assured"},{"inline":true,"label":"postman","permalink":"/clematis.doc/docs/tags/postman"},{"inline":true,"label":"httpie","permalink":"/clematis.doc/docs/tags/httpie"},{"inline":true,"label":"spring-rest-docs","permalink":"/clematis.doc/docs/tags/spring-rest-docs"},{"inline":true,"label":"spring-doc-open-api","permalink":"/clematis.doc/docs/tags/spring-doc-open-api"}],"version":"current","lastUpdatedAt":1742842901000,"sidebarPosition":10,"frontMatter":{"sidebar_position":10,"tags":["swagger","openapi","hateoas","rest","restdocs","rest-assured","postman","httpie","spring-rest-docs","spring-doc-open-api"]},"sidebar":"tutorialSidebar","previous":{"title":"Cosmic And Vitest","permalink":"/clematis.doc/docs/web-applications/testing/cosmic"},"next":{"title":"Server Application","permalink":"/clematis.doc/docs/web-applications/server-application"}}');var s=i(74848),o=i(28453);const r={sidebar_position:10,tags:["swagger","openapi","hateoas","rest","restdocs","rest-assured","postman","httpie","spring-rest-docs","spring-doc-open-api"]},a="Documenting Backend API",c={},l=[{value:"REST And Hateoas Implementation",id:"rest-and-hateoas-implementation",level:2},{value:"SpringDoc OpenAPI",id:"springdoc-openapi",level:2},{value:"Money Tracker",id:"money-tracker",level:3},{value:"Swagger Authentication",id:"swagger-authentication",level:3},{value:"Cosmic, Weather, Storage, etc.",id:"cosmic-weather-storage-etc",level:3},{value:"Postman Collections",id:"postman-collections",level:3},{value:"Using Spring REST Docs",id:"using-spring-rest-docs",level:2},{value:"Installation",id:"installation",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Testing And Documenting A Feature",id:"testing-and-documenting-a-feature",level:3}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"documenting-backend-api",children:"Documenting Backend API"})}),"\n",(0,s.jsx)(n.h2,{id:"rest-and-hateoas-implementation",children:"REST And Hateoas Implementation"}),"\n",(0,s.jsxs)(n.p,{children:["With HATEOAS clients need to know only the\nentrypoint of the API, and then the information\nabout the resources is received via ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Hypermedia",children:"hypermedia"}),"\nfollow-up links. All the Clematis APIs are using Hateoas specification."]}),"\n",(0,s.jsx)(n.h2,{id:"springdoc-openapi",children:"SpringDoc OpenAPI"}),"\n",(0,s.jsx)(n.h3,{id:"money-tracker",children:"Money Tracker"}),"\n",(0,s.jsxs)(n.p,{children:["This API is documented with ",(0,s.jsx)(n.a,{href:"https://springdoc.org/v1/",children:"SpringDoc Open API"}),"\nversion 1.8.0, which is the last compatible with the Spring Boot 2."]}),"\n",(0,s.jsx)(n.p,{children:"The support for Spring Data Rest and Hateoas is available with the\nfollowing dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",metastring:'title="build.gradle"',children:"dependencies {\n    implementation 'org.springdoc:springdoc-openapi-ui:1.8.0'\n    implementation 'org.springdoc:springdoc-openapi-hateoas:1.8.0'\n    implementation 'org.springdoc:springdoc-openapi-data-rest:1.8.0'\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Also, a ",(0,s.jsx)(n.a,{href:"https://github.com/springdoc/springdoc-openapi-gradle-plugin",children:"springdoc-openapi-gradle-plugin"}),"\nis added to generate documentation on every build:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",metastring:'title="build.gradle"',children:'plugins {\n    id("org.springdoc.openapi-gradle-plugin") version "1.9.0"\n}\n\n// settings are for the resulting file \nopenApi {\n    outputDir.set(file("docs"))\n    outputFileName.set("swagger.json")\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"The generation of documentation also can be started manually with command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./gradlew generateOpenApiDocs\n"})}),"\n",(0,s.jsx)(n.p,{children:"It will start the SpringBoot application and will try to query all the endpoints\nby itself. In the case of Money Tracker API, the environment variables have to be provided."}),"\n",(0,s.jsx)(n.h3,{id:"swagger-authentication",children:"Swagger Authentication"}),"\n",(0,s.jsx)(n.p,{children:"Since the Money Tracker API is not open for non-registered users, each request should have\na JWT token provided. Money Tracker UI takes that token from Keycloak API. Here, for\nOpenAPI documentation, a simple option to provide such JWT token is configured."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="src/main/java/org/clematis/mt/config/OpenAPIConfig.java"',children:'import static org.springdoc.core.Constants.ALL_PATTERN;\nimport org.springdoc.core.GroupedOpenApi;\nimport org.springdoc.core.customizers.OpenApiCustomiser;\n\nimport io.swagger.v3.oas.annotations.enums.SecuritySchemeType;\nimport io.swagger.v3.oas.annotations.security.SecurityScheme;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.info.Info;\n\n@Configuration\n@SecurityScheme(\n    name = "Bearer Authentication",\n    type = SecuritySchemeType.HTTP,\n    bearerFormat = "JWT",\n    scheme = "bearer"\n)\npublic class OpenAPIConfig {\n //...\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The token can be retrieved with the following request to Clematis Auth API with\n",(0,s.jsx)(n.code,{children:"clematis-money-tracker-ui"})," client id and registered username and password:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl --location 'http://[__keycloak_server__]:[__port__]/auth/realms/clematis/protocol/openid-connect/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=password' \\\n--data-urlencode 'client_id=clematis-money-tracker-ui' \\\n--data-urlencode 'client_secret=p6BgCWlV1sqZbor8e4S6BceQSsaGICfr' \\\n--data-urlencode 'username=[__username__]' \\\n--data-urlencode 'password=[__password__]'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cosmic-weather-storage-etc",children:"Cosmic, Weather, Storage, etc."}),"\n",(0,s.jsxs)(n.p,{children:["These backend APIs are using Spring Boot 3.4 and above, and they need another branch of ",(0,s.jsx)(n.a,{href:"https://springdoc.org/#Introduction",children:(0,s.jsx)(n.code,{children:"springdoc-openapi"})}),"\njava library:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",metastring:'title="build.gradle"',children:"dependencies {\n    implementation 'org.springdoc:springdoc-openapi-starter-common:2.8.5'\n    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"The plugin configuration is the same as for version 1:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",metastring:'title="build.gradle"',children:'plugins {\n    id("org.springdoc.openapi-gradle-plugin") version "1.9.0"\n}\n\n// settings are for the resulting file \nopenApi {\n    outputDir.set(file("docs"))\n    outputFileName.set("swagger.json")\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"However, the Spring configuration bean differs in terms of imported paths:"}),"\n",(0,s.jsx)(n.admonition,{title:"Migration guide",type:"info",children:(0,s.jsxs)(n.p,{children:["Migration guide from version 1 is ",(0,s.jsx)(n.a,{href:"https://springdoc.org/#migrating-from-springdoc-v1",children:"available here"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import static org.springdoc.core.utils.Constants.ALL_PATTERN;\nimport org.springdoc.core.models.GroupedOpenApi;\nimport org.springdoc.core.properties.SwaggerUiConfigProperties;\n\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.info.Info;\n\n@Configuration\npublic class OpenAPIConfig {\n\n//...\n\n    @Bean\n    public GroupedOpenApi filesApi() {\n        return GroupedOpenApi.builder()\n                .group("Files")\n                .pathsToMatch("/api/files")\n                .build();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Clematis Cosmic API, Clematis Weather API and Storage API don't have any authentication, so Swagger UI doesn't use\nauthentication token configuration."}),"\n",(0,s.jsx)(n.h3,{id:"postman-collections",children:"Postman Collections"}),"\n",(0,s.jsxs)(n.p,{children:["Postman can ",(0,s.jsx)(n.a,{href:"https://learning.postman.com/docs/getting-started/importing-and-exporting/importing-from-swagger/",children:"import"}),"\nthe ",(0,s.jsx)(n.code,{children:"swagger.json"})," file that has been generated in the previous step. The Postman collections\nare available in Git repositories in the ",(0,s.jsx)(n.code,{children:"doc"})," folders."]}),"\n",(0,s.jsxs)(n.admonition,{title:"Postman variables",type:"info",children:[(0,s.jsxs)(n.p,{children:["Please note, that the collections are using ",(0,s.jsx)(n.code,{children:"baseUrl"})," variable which can be set\nfor the whole collection with another environment variable, for instance ",(0,s.jsx)(n.code,{children:"baseUrl = {{mt_host}}"}),"."]}),(0,s.jsx)(n.p,{children:"Also, Bearer Token authorization is set for the entire collection and the token should be updated manually."})]}),"\n",(0,s.jsx)(n.h2,{id:"using-spring-rest-docs",children:"Using Spring REST Docs"}),"\n",(0,s.jsxs)(n.p,{children:["Another approach is to use ",(0,s.jsx)(n.a,{href:"https://docs.spring.io/spring-restdocs/docs/current/reference/htmlsingle/#introduction",children:"Spring Restdocs"})," library, which additionally helps to start with\nTest Driven Development for backend. The only requirement is that the library has to be combined with one\nof the testing libraries: ",(0,s.jsx)(n.a,{href:"https://spring.io/guides/gs/testing-web",children:"MockMvc"}),",\n",(0,s.jsx)(n.a,{href:"https://docs.spring.io/spring-framework/reference/testing/webtestclient.html",children:"WebTestClient"}),"\nor ",(0,s.jsx)(n.a,{href:"https://rest-assured.io",children:"REST-assured"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["All Clematis API are being migrated to REST-assured from ",(0,s.jsx)(n.a,{href:"https://docs.spring.io/spring-boot//api/java/org/springframework/boot/test/web/client/TestRestTemplate.html",children:"TestRestTemplate"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["It is enough to follow the documentation for ",(0,s.jsx)(n.a,{href:"https://docs.spring.io/spring-restdocs/docs/current/reference/htmlsingle/#getting-started-build-configuration",children:"configuration"}),";\nhowever, there is an update to it, see below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",metastring:'title="build.gradle"',children:"plugins { \n    id \"org.asciidoctor.jvm.convert\" version \"4.0.4\"\n}\n\nconfigurations {\n\tasciidoctorExt \n}\n\ndependencies {\n\tasciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor' \n\ttestImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' \n}\n\next { \n\tsnippetsDir = file('build/generated-snippets')\n}\n\ntest { \n\toutputs.dir snippetsDir\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The plugin ",(0,s.jsx)(n.code,{children:"org.asciidoctor.jvm.convert"})," ",(0,s.jsx)(n.a,{href:"https://github.com/asciidoctor/asciidoctor-gradle-plugin",children:"homepage"}),"\nalso contains some useful information about available configuration options."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The Spring configuration for REST-assured is described ",(0,s.jsx)(n.a,{href:"/clematis.doc/docs/web-applications/backend-testing#spring-rest-tests",children:"later"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:"asciidoc"})," itself it is possible to use a more sophisticated configuration to\ncreate an HTML book with examples of queries:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",metastring:'title="build.gradle"',children:"asciidoctor {\n    dependsOn test\n    options doctype: 'book'\n\n    attributes = [\n            'source-highlighter': 'highlightjs',\n            'imagesdir'         : './images',\n            'toc'               : 'left',\n            'toclevels'         : 3,\n            'numbered'          : '',\n            'icons'             : 'font',\n            'setanchors'        : '',\n            'idprefix'          : '',\n            'idseparator'       : '-',\n            'docinfo1'          : '',\n            'safe-mode-unsafe'  : '',\n            'allow-uri-read'    : '',\n            'snippets'          : snippetsDir,\n            linkattrs           : true,\n            encoding            : 'utf-8'\n    ]\n\n    inputs.dir snippetsDir\n    outputDir \"build/asciidoc\"\n    sourceDir 'src/docs/asciidocs'\n\n// important since otherwise relative include files will be resolved \n// using gradle working directory\n    baseDir sourceDir \n    \n    sources {\n        include 'api.adoc'\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The file ",(0,s.jsx)(n.code,{children:"api.doc"})," mentioned in this configuration is an index\nfile which AsciiDoc will process, and all the snippets\nwill be added to it. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-asciidoc",metastring:'title="src/docs/asciidocs/api.adoc"',children:"== Clematis Storage API\n=== Endpoints\n\n==== Get file by ID\n===== Curl example\ninclude::{snippets}/index/curl-request.adoc[]\n===== HTTP Request\ninclude::{snippets}/index/http-request.adoc[]\n===== HTTP IE Request\ninclude::{snippets}/index/httpie-request.adoc[]\n===== HTTP Response\n====== Success HTTP response\ninclude::{snippets}/index/http-response.adoc[]\n====== Response body\ninclude::{snippets}/index/response-body.adoc[]\n\n//...\n\n== REST convention\ninclude::rest_conv.adoc[]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The signs ",(0,s.jsx)(n.code,{children:"="})," are the nested headers, the result content tree will have these indents.\nFile ",(0,s.jsx)(n.code,{children:"rest_conv.adoc"})," can be found in the same directory as ",(0,s.jsx)(n.code,{children:"api.adoc"})," file."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Unlike Swagger UI and Postman, the documentation here is focusing on completeness and\ntries to be as user-friendly as possible, therefore, more human-authored text is required\nand snippets are to be included manually."})}),"\n",(0,s.jsx)(n.h3,{id:"testing-and-documenting-a-feature",children:"Testing And Documenting A Feature"}),"\n",(0,s.jsxs)(n.p,{children:["REST-assured tests resemble ",(0,s.jsx)(n.a,{href:"/clematis.doc/docs/web-applications/cucumber-playwright",children:"the ones with Gherkin and Playwright"})," for frontend.\nIt is also possible to test a feature, just not in UI domain, since\nREST-assured offers BDD's given-when-then syntax, for example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="src/test/java/org/clematis/storage/controller/StorageControllerTests.java"',children:'@Test\npublic void testFileUpload() throws IOException {\n\n    RequestResponse responseEntity =\n        given(this.spec)\n            .multiPart(mockMultipartFile().getFile())\n            .filter(document("upload"))\n        .when()\n            .post("/api/files/upload")\n        .andReturn().as(RequestResponse.class);\n\n    Assertions.assertNotNull(responseEntity);\n    Assertions.assertNotNull(responseEntity.getDownloadUrl());\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["With Spring REST docs library, these tests also can generate snippets which in turn\ncan be included in API documentation and updated on every project build. If the API",(0,s.jsx)(n.br,{}),"\n","changes, tests will possibly fail and documentation will be updated once\ntests are fixed automatically. The code fragments like below are responsible for intercepting\nthe test requests ",(0,s.jsx)(n.code,{children:'.filter(document("upload"))'})," and chained to REST-assured\ncalls."]}),"\n",(0,s.jsxs)(n.p,{children:["After deployment, the documentation is available at ",(0,s.jsx)(n.code,{children:"server:port/docs/api.html"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"Instead of Postman",type:"tip",children:(0,s.jsxs)(n.p,{children:["Spring REST docs library also provides methods for ",(0,s.jsx)(n.a,{href:"https://httpie.io/",children:"HTTPie"})," tool."]})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);