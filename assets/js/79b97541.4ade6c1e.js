"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[3985],{95210:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"web-applications-security/web-applications-security","title":"Web Applications Security","description":"Security in the Money Tracker application was implemented using","source":"@site/docs/web-applications-security/web-applications-security.md","sourceDirName":"web-applications-security","slug":"/web-applications-security/","permalink":"/clematis.doc/docs/web-applications-security/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"proxmox","permalink":"/clematis.doc/docs/tags/proxmox"},{"inline":true,"label":"keycloak","permalink":"/clematis.doc/docs/tags/keycloak"},{"inline":true,"label":"openresty","permalink":"/clematis.doc/docs/tags/openresty"},{"inline":true,"label":"openssh","permalink":"/clematis.doc/docs/tags/openssh"},{"inline":true,"label":"ssl","permalink":"/clematis.doc/docs/tags/ssl"},{"inline":true,"label":"nginx","permalink":"/clematis.doc/docs/tags/nginx"}],"version":"current","lastUpdatedAt":1748623523000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3,"tags":["proxmox","keycloak","openresty","openssh","ssl","nginx"]},"sidebar":"tutorialSidebar","previous":{"title":"Continuous Deployment","permalink":"/clematis.doc/docs/web-applications/continuous-deployment/"},"next":{"title":"Recipe Book","permalink":"/clematis.doc/docs/recipe-book/"}}');var i=t(74848),r=t(28453);const s={sidebar_position:3,tags:["proxmox","keycloak","openresty","openssh","ssl","nginx"]},a="Web Applications Security",c={},l=[{value:"Cost of Maintenance",id:"cost-of-maintenance",level:2},{value:"Decommissioning Embedded Keycloak Server",id:"decommissioning-embedded-keycloak-server",level:2},{value:"Migration to Keycloak Proxmox CT VM",id:"migration-to-keycloak-proxmox-ct-vm",level:2},{value:"Spring Boot 2 Backend",id:"spring-boot-2-backend",level:2},{value:"Migration of Angular Frontend to Angular v19 and Keycloak v19",id:"migration-of-angular-frontend-to-angular-v19-and-keycloak-v19",level:2},{value:"Migration to Angular v19",id:"migration-to-angular-v19",level:3},{value:"TypeScript changes",id:"typescript-changes",level:3},{value:"Migration to Keycloak v19",id:"migration-to-keycloak-v19",level:3},{value:"Local Network Connection Encryption",id:"local-network-connection-encryption",level:2},{value:"Generating A Certificate",id:"generating-a-certificate",level:3},{value:"Jenkins Configuration",id:"jenkins-configuration",level:3},{value:"Adding SSL To Nginx in Openresty",id:"adding-ssl-to-nginx-in-openresty",level:3},{value:"Docker Compose Modification",id:"docker-compose-modification",level:3},{value:"Storing The Certificate In A Docker Volume",id:"storing-the-certificate-in-a-docker-volume",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"web-applications-security",children:"Web Applications Security"})}),"\n",(0,i.jsxs)(n.p,{children:["Security in the ",(0,i.jsx)(n.a,{href:"https://github.com/grauds/money.tracker.ui",children:"Money Tracker"})," application was implemented using\nan embedded Keycloak server instance and adapters for Spring Boot 2 and for several major versions of Angular.\nThis architecture has been working for over three years.\nI was about to put it to documentation when new versions came out for both Keycloak and Angular,\nwhich brought up significant changes and made the story more complex."]}),"\n",(0,i.jsx)(n.h2,{id:"cost-of-maintenance",children:"Cost of Maintenance"}),"\n",(0,i.jsxs)(n.p,{children:["The embedded instance of Keycloak (Clematis Auth API) is actually a Gradle-based interpretation\nof ",(0,i.jsx)(n.a,{href:"https://github.com/thomasdarimont/embedded-spring-boot-keycloak-server",children:"Thomas Darimont's project"}),", which is\nstopped at Keycloak version 18.x and probably won't be maintained any longer; Clematis Auth API supports Keycloak version 20.\nThe project required development efforts every time a Keycloak version is updated.\nIt would require even more effort to\n",(0,i.jsx)(n.a,{href:"https://github.com/thomasdarimont/embedded-spring-boot-keycloak-server/issues/87",children:"update the application to Spring Boot 3"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"decommissioning-embedded-keycloak-server",children:"Decommissioning Embedded Keycloak Server"}),"\n",(0,i.jsx)(n.p,{children:"It was decided to discontinue the maintenance of Clematis Auth API beyond May 30, 2025, and to delete the project."}),"\n",(0,i.jsx)(n.h2,{id:"migration-to-keycloak-proxmox-ct-vm",children:"Migration to Keycloak Proxmox CT VM"}),"\n",(0,i.jsxs)(n.p,{children:["Since Clematis applications have been living in Proxmox box for one year already, there is a good chance to\ngive Proxmox an opportunity to bridge the gap and to host Keycloak as a virtual machine instance. There is no\nofficial template, but the Proxmox community\nhas it: ",(0,i.jsx)(n.a,{href:"https://community-scripts.github.io/ProxmoxVE/scripts?id=keycloak",children:"Keycloak Template"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The first step is to open Proxmox VE Shell and use the following to build a CT template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'bash -c "$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/ct/keycloak.sh)"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The next step is to open Proxmox Web Admin UI to ",(0,i.jsx)(n.a,{href:"https://pve.proxmox.com/wiki/Linux_Container",children:"create a new LXC Container"}),".\nThe new Keycloak template was created in the previous step, and it is just required to specify the hardware resources\ndepending on the particular server configuration."]}),"\n",(0,i.jsxs)(n.p,{children:["After the container is started, the new instance of Keycloak is available at container IP address and port 8080. But\nbefore the login page can be used, it is necessary to configure temporary admin access to the server using the\nsteps ",(0,i.jsx)(n.a,{href:"https://github.com/community-scripts/ProxmoxVE/discussions/193",children:"on this page"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="SSH login to the container IP address"',children:"systemctl stop keycloak.service\ncd /opt/keycloak/bin\n./kc.sh bootstrap-admin user\nsystemctl start keycloak.service\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Follow the onscreen instructions to create a new admin user when running ",(0,i.jsx)(n.code,{children:"./kc.sh bootstrap-admin user"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"It is a wise move to migrate the configuration from the existing installation of Keycloak. However, be prepared\nin this case to regenerate all the clients' passwords and secrets."})}),"\n",(0,i.jsx)(n.h2,{id:"spring-boot-2-backend",children:"Spring Boot 2 Backend"}),"\n",(0,i.jsx)(n.p,{children:"After a new instance of Keycloak is up and running, Spring Boot 2 backend will work with the new instance after\nthe Keycloak URL and the application shared secret are updated."}),"\n",(0,i.jsx)(n.p,{children:"As a reminder, the following dependency is being used:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",metastring:'title="build.gradle"',children:"dependencies {\n//...\n    implementation 'org.keycloak:keycloak-spring-boot-starter:25.0.3'\n//...    \n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Checking the application configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="src/main/resources/application.yml"',children:'spring:\n  auth:\n    authServer: "http://${KEYCLOAK_URL}:${KEYCLOAK_PORT}/realms/${keycloak.realm}/protocol/openid-connect"\n    clientSecret: ${KEYCLOAK_SECRET}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The placeholders are properties taken from the environment variables for the Docker container, for example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"KEYCLOAK_URL=192.168.1.157\nKEYCLOAK_PORT=8080\nKEYCLOAK_SECRET=${KEYCLOAK_SECRET}\nKEYCLOAK_CLIENT=clematis-money-tracker-api\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And I also had to update Jenkins secret named ",(0,i.jsx)(n.code,{children:"MT_API_KEYCLOAK_SECRET"})," which is being fused into the ",(0,i.jsx)(n.code,{children:"KEYCLOAK_SECRET"}),"\nduring the build."]}),"\n",(0,i.jsx)(n.admonition,{title:"Can Be Done Better",type:"tip",children:(0,i.jsx)(n.p,{children:"Keycloak adapter won't support Spring Boot 3, so migration off this dependency is planned, also improving\nmaintainability of the security layer."})}),"\n",(0,i.jsx)(n.h2,{id:"migration-of-angular-frontend-to-angular-v19-and-keycloak-v19",children:"Migration of Angular Frontend to Angular v19 and Keycloak v19"}),"\n",(0,i.jsx)(n.p,{children:"Angular and Keycloak adapter are tightly coupled together, and a Keycloak adapter version follows the one of Angular,\nfor instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "dependencies": {\n    "@angular/animations": "^19.2.13",\n    "@angular/cdk": "^19.2.13",\n    "@angular/common": "^19.2.13",\n    "@angular/compiler": "^19.2.13",\n    "@angular/core": "^19.2.13",\n    "@angular/forms": "^19.2.13",\n    "@angular/localize": "^19.2.13",\n    "@angular/material": "^19.2.13",\n    "@angular/material-moment-adapter": "^19.2.13",\n    "@angular/platform-browser": "^19.2.13",\n    "@angular/platform-browser-dynamic": "^19.2.13",\n    "@angular/router": "^19.2.13",\n    "keycloak-angular": "^19.0.2",\n    "keycloak-js": "^26.2.0"\n  },\n  "devDependencies": {\n    "@angular-devkit/build-angular": "^19.2.13",\n    "@angular-devkit/core": "^19.2.13",\n    "@angular-devkit/schematics": "^19.2.13",\n    "@angular/cli": "^19.2.13",\n    "@angular/compiler-cli": "^19.2.13",\n    "@angular/language-service": "^19.2.13",\n    "@types/keycloak-js": "^3.4.1"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"But before everything, please check the Node version used, since Angular 19 supports Node.js versions 18.19.1, 20.11.1, and 22.0.0 (and newer).\nAlso, TypeScript version 5.6 or higher and RxJS version ^6.5.3 or ^7.5."})}),"\n",(0,i.jsx)(n.h3,{id:"migration-to-angular-v19",children:"Migration to Angular v19"}),"\n",(0,i.jsxs)(n.p,{children:["The process is described in detail in this manual ",(0,i.jsx)(n.a,{href:"https://angular.dev/update-guide?v=18.0-19.0&l=2",children:"migration of Angular to version 19"}),".\nIn addition to these steps, I had to do the following:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Environment configuration replaces ",(0,i.jsx)(n.code,{children:"browserTarget"})," with ",(0,i.jsx)(n.code,{children:"buildTarget"})," in project.json:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="projest.json"',children:'{\n    "serve": {\n      "executor": "@angular-devkit/build-angular:dev-server",\n      "configurations": {\n        "default": {\n          "buildTarget": "money-tracker-ui:build:default"\n        },\n        "demo": {\n          "buildTarget": "money-tracker-ui:build:demo"\n        }\n      },\n      "defaultConfiguration": "development"\n    }\n }\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["Removed the application bootstrapping from ",(0,i.jsx)(n.code,{children:"app.module.ts"})," file, it now only imports non-standalone components from\nthe application package and acts as a module:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'jsx title="apps/money-tracker-ui/src/app/app.module.ts"',children:"// imports for the application components and third-party components\n@NgModule({\n   declarations: [\n      // declarations for the application components\n   ],\n   imports: [\n      // third-party component dependencies for the module\n   ],\n   exports: [\n      HeaderComponent\n   ],\n   providers: []\n})\nexport class AppModule {\n   constructor(\n           hateoasConfig: NgxHateoasClientConfigurationService,\n           environmentService: EnvironmentService\n   ) {\n      hateoasConfig.configure({\n         http: {\n            defaultRoute: {\n               rootUrl: environmentService.getValue('apiUrl'),\n            },\n         },\n         useTypes: {\n            resources: [\n               AccountBalance,\n               Entity,\n               CommodityGroup,\n               Commodity,\n               MoneyExchange,\n               MoneyType,\n               MonthlyDelta,\n               OrganizationGroup,\n               Organization,\n               ExpenseItem,\n               UnitType,\n            ],\n         },\n      });\n   }\n}\n\nexport class AppComponentsModule {}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["The AppComponent is standalone and is bootstrapped in ",(0,i.jsx)(n.code,{children:"main.ts"})," file now:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'jsx title="apps/money-tracker-ui/src/main.ts"',children:"// imports requires for third-party providers and the main application component\nif (environment.production) {\n   enableProdMode();\n}\n\nbootstrapApplication(AppComponent, {\n   providers: [\n      provideRouter(routes),\n      provideHttpClient(),\n      provideAnimations(),\n      importProvidersFrom(\n              // third-party providers\n              SharedComponentsModule,\n              AppComponentsModule // note, that the components specific for the application are the \n                      // same module as the shared components and other modules\n      ),\n      // to add Keycloak providers in the next step\n      provideRouter(routes),\n      {\n         provide: ENVIRONMENT,\n         useValue: environment,\n      },\n      provideHttpClient(withInterceptors([includeBearerTokenInterceptor]))\n   ],\n}).catch((err) => console.error(err));\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"As a result, the new configuration is more concise and logical than before."}),"\n",(0,i.jsx)(n.h3,{id:"typescript-changes",children:"TypeScript changes"}),"\n",(0,i.jsx)(n.p,{children:"Angular v19 requires some updates for TypeScript compiler settings:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="tsconfig.base.json"',children:'{\n  "compilerOptions": {\n    "target": "es2022",\n    "module": "es2022",\n    "strict": true\n  },\n  "angularCompilerOptions": {\n    "strictInjectionParameters": true,\n    "strictTemplates": true,\n    "compilationMode": "partial"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"migration-to-keycloak-v19",children:"Migration to Keycloak v19"}),"\n",(0,i.jsxs)(n.p,{children:["This version came out in December'24 and has some breaking changes as it's seen in the\n",(0,i.jsx)(n.a,{href:"https://github.com/mauriciovigolo/keycloak-angular/releases/tag/v19.0.0",children:"Release Notes"}),".\nLet's open the ",(0,i.jsx)(n.a,{href:"https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/migration-guides/v19.md",children:"Migration Guide"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Direct usage of the ",(0,i.jsx)(n.code,{children:"keycloak-js"})," client eliminates the need for a wrapper service. However,\nto be able to use imports from ",(0,i.jsx)(n.code,{children:"keycloak-js"}),", TypeScript module resolution has to be changed to allow such imports:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="tsconfig.base.json"',children:'{\n   "compilerOptions": {\n     "moduleResolution": "bundler",\n     "lib": ["es2021", "dom"]\n   }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Note that this change can potentially break the other libraries' imports, so do it with caution. In my case, I\nhad to sacrifice only one import from Lagoshny's library:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { PageParam } from "@lagoshny/ngx-hateoas-client";\n'})}),"\n",(0,i.jsx)(n.p,{children:"and go without this type for now."}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Keycloak provider has been added to Angular configuration:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'jsx title="apps/money-tracker-ui/src/main.ts"',children:"//...\nimport {\n    provideKeycloak,\n    createInterceptorCondition,\n    IncludeBearerTokenCondition,\n    INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n    includeBearerTokenInterceptor\n} from \"keycloak-angular\";\n// ...\n\nif (environment.production) {\n   enableProdMode();\n}\n\n// only calls to API require token headers\nconst urlCondition = createInterceptorCondition<IncludeBearerTokenCondition>({\n    urlPattern: /^(.*\\/api\\/.*)?$/i,\n    bearerPrefix: 'Bearer'\n});\n\nbootstrapApplication(AppComponent, {\n   providers: [\n      provideRouter(routes),\n      provideHttpClient(),\n      provideAnimations(),\n      importProvidersFrom(\n          //...\n              SharedComponentsModule,\n              AppComponentsModule \n      ),\n      // keycloak provider \n      provideKeycloak({\n         config: {\n             url: environment.authUrl,\n             realm: 'clematis',\n             clientId: 'clematis-money-tracker-ui',\n         },\n         initOptions: {\n             onLoad: 'check-sso',\n             silentCheckSsoRedirectUri: `${window.location.origin}/assets/silent-check-sso.html`\n         }\n      }),\n      {\n         provide: INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n         useValue: [urlCondition]\n      },\n      provideZoneChangeDetection({ eventCoalescing: true }),\n      provideRouter(routes),\n      {\n         provide: ENVIRONMENT,\n         useValue: environment,\n      },\n      provideHttpClient(withInterceptors([includeBearerTokenInterceptor]))\n   ],\n}).catch((err) => console.error(err));\n\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The URL condition above configures the path to send jwt token along, see ",(0,i.jsx)(n.a,{href:"https://github.com/mauriciovigolo/keycloak-angular#httpclient-interceptors",children:"the manual"}),"."]})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["AuthGuard has been replaced with ",(0,i.jsx)(n.code,{children:"canActivate"})," function:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:"jsx",children:"import {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\n\nimport { AuthGuardData, createAuthGuard } from \"keycloak-angular\";\n\nconst isAccessAllowed =  async (\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot,\n    authData: AuthGuardData\n  ): Promise<boolean | UrlTree> => {\n\n    const { authenticated, grantedRoles } = authData;\n\n    // Get the roles required from the route.\n    const requiredRole = route.data['role'];\n\n    // Allow the user to proceed if no roles are required to access the route.\n    if (!requiredRole) {\n      return authenticated;\n    }\n\n    const hasRequiredRole = (role: string): boolean =>\n        Object.values(grantedRoles.resourceRoles).some((roles) => roles.includes(role));\n\n    // Allow the user to proceed if all the required roles are present.\n    return authenticated && hasRequiredRole(requiredRole);\n  }\n\nexport const canActivate = createAuthGuard<CanActivateFn>(isAccessAllowed);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Roles were added as well, since I believe there will be a need for them soon in this and the other applications."}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["Application main component is the only component now that deals with\n",(0,i.jsx)(n.a,{href:"https://github.com/mauriciovigolo/keycloak-angular?tab=readme-ov-file#keycloak-events-signal",children:"Keycloak signals"}),";\nthe similar logic has been removed from the other components:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:"jsx",children:"//...\nexport class AppComponent {\n\n    //...\n    isLoggedIn = false;\n    userProfile: KeycloakProfile | undefined = undefined;\n    private readonly keycloakSignal = inject(KEYCLOAK_EVENT_SIGNAL);\n\n    constructor(\n        protected readonly keycloak: Keycloak,\n        private readonly router: Router,\n        private readonly route: ActivatedRoute\n    ) {\n\n        // subscription to updates\n        effect(() => {\n\n                const keycloakEvent: KeycloakEvent = this.keycloakSignal();\n\n                // synchronize the state with Keycloak lifecycle\n                this.isLoggedIn = typeEventArgs<ReadyArgs>(keycloakEvent.args);\n                this.keycloak.loadUserProfile().then((profile) => {\n                    this.userProfile = profile;\n                }).catch((error) => {\n                    this.userProfile = undefined;\n                    this.keycloak.login();\n                });\n\n                if (keycloakEvent.type == KeycloakEventType.AuthSuccess) {\n                    \n                    // redirect to the required route after Keycloak login screen\n                    if (this.route.snapshot.queryParams['redirect']) {\n                        const params: HttpParams = Utils.moveQueryParametersFromRedirectUrl(\n                            this.route.snapshot.queryParams\n                        );\n                        this.router.navigate([params.get('redirect')], {\n                            queryParams: Utils.parseRedirectParameters(params),\n                        });\n                    }\n\n                } else if (\n                    keycloakEvent.type == KeycloakEventType.AuthError\n                    ||\n                    keycloakEvent.type == KeycloakEventType.AuthLogout\n                    ||\n                    keycloakEvent.type == KeycloakEventType.TokenExpired\n                ) {\n\n                    this.userProfile = undefined;\n                    this.keycloak.logout(); // close the application session\n\n                }\n            }\n        )\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"local-network-connection-encryption",children:"Local Network Connection Encryption"}),"\n",(0,i.jsxs)(n.p,{children:["Keycloak checks storage access during authentication to know if it is able to work with the local storage of the client's\nbrowser. If the connection is not secured, development console will show a message ",(0,i.jsx)(n.code,{children:"Access to storage is not allowed from this context"}),".\nThere is also a definitive bias towards excluding non-secure connections from support in Keycloak, for example in the\nfollowing thread:\n",(0,i.jsx)(n.a,{href:"https://github.com/keycloak/keycloak/discussions/32087",children:"enforce security on Keycloak users"}),".\nHaving said that, it is a good practice to enable HTTPS for Keycloak and the applications which use it even\nif the server and the applications are on the local network."]}),"\n",(0,i.jsx)(n.h3,{id:"generating-a-certificate",children:"Generating A Certificate"}),"\n",(0,i.jsxs)(n.p,{children:["To create a self-signed certificate for our local network using ",(0,i.jsx)(n.a,{href:"https://www.openssl.org",children:"OpenSSL"}),"\nand a private key in the ",(0,i.jsx)(n.code,{children:"nginx/ssl"})," directory:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir -p nginx/ssl\nopenssl req -x509 -newkey rsa:2048 \\\n    -keyout nginx/ssl/private.key \\\n    -out nginx/ssl/certificate.crt\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"X.509 is a standard format for public key certificates. Each X.509 certificate includes a public key,\nidentifying information, and a digital signature."}),"\n",(0,i.jsx)(n.li,{children:"-newkey rsa:2048: Generates a new private key using the RSA algorithm with a 2048-bit length"}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"jenkins-configuration",children:"Jenkins Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Since the builds and deploys are handled by Jenkins, the ultimate destination for these files is the\ninternal ",(0,i.jsx)(n.a,{href:"https://www.jenkins.io/doc/book/using/using-credentials/",children:"Jenkins storage for secret files"}),".\nFor example, the names can be: ",(0,i.jsx)(n.code,{children:"nginx-ssl-cert"})," and ",(0,i.jsx)(n.code,{children:"nginx-ssl-key"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"adding-ssl-to-nginx-in-openresty",children:"Adding SSL To Nginx in Openresty"}),"\n",(0,i.jsxs)(n.p,{children:["Money Tracker Web Application is using ",(0,i.jsx)(n.a,{href:"https://openresty.org/en/",children:"Openresty"})," image for deployment;\nthis affects the paths needed to install certificates and configuration file."]}),"\n",(0,i.jsx)(n.p,{children:"The configuration file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nginx",metastring:'configuration title="/etc/nginx/conf.d/default.conf"',children:"server {\n    # Redirect HTTP to HTTPS\n    listen 80 default_server;\n    server_name _;\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl default_server;\n    server_name _;\n    root /var/www/money-tracker-ui;\n\n    # SSL configuration for OpenResty\n    ssl_certificate /usr/local/openresty/nginx/ssl/certificate.crt;\n    ssl_certificate_key /usr/local/openresty/nginx/ssl/private.key;\n\n    # Recommended SSL settings\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # SSL session settings\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n\n    # HSTS (uncomment if you're sure)\n    # add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n    # Disabled caching so the browser won't cache the site.\n    expires           0;\n    add_header        Cache-Control private;\n\n    location ~* ^/auth/(.*) {\n        proxy_http_version 1.1;\n        proxy_pass http://192.168.1.157:8080/$1; # connection to Proxmox Keycloak to fix later\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n    }\n\n    location ~* ^/api/ {\n        proxy_http_version 1.1;\n        proxy_pass http://192.168.1.118:18085;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n    }\n   \n    # ... \n \n    location / {\n        index index.html;\n        try_files $uri $uri/ /index.html;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"As a result, Nginx expects to find a certificate in its local container path:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/usr/local/openresty/nginx/ssl\n"})}),"\n",(0,i.jsx)(n.h3,{id:"docker-compose-modification",children:"Docker Compose Modification"}),"\n",(0,i.jsx)(n.p,{children:"The next step is to make sure the Docker container will get the files in the directory it expects.\nOne of the best approaches is to create a Docker volume and to copy the files from Jenkins\ncredentials storage there; then it should be mounted to the application container,\nfor example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"volumes:\n    - ssl_certs:/usr/local/openresty/nginx/ssl:ro\n"})}),"\n",(0,i.jsx)(n.p,{children:"The full example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:'language-title="apps/money-tracker-ui/jenkins/docker-compose.yml"',children:"services:\n  money-tracker-ui:\n    container_name: clematis-money-tracker-ui\n    image: money.tracker.ui.uat:latest\n    ports:\n      - '18081:80'\n      - '18443:443'\n    volumes:\n      - \"/home/jenkins/workspace/Money Tracker UI Deployment/apps/money-tracker-ui/jenkins/nginx-default.conf:/etc/nginx/conf.d/default.conf\"\n      - ssl_certs:/usr/local/openresty/nginx/ssl:ro\n    networks:\n      - clematis\n    restart: unless-stopped\n    \n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Since Jenkins is running in a Docker container, the path for ",(0,i.jsx)(n.code,{children:"nginx-default.conf"})," has to be given\nrelative to the host machine file system. The shortcut is to hardcode it, since it is immutable if\nthe name of the job is not changed."]})}),"\n",(0,i.jsx)(n.h3,{id:"storing-the-certificate-in-a-docker-volume",children:"Storing The Certificate In A Docker Volume"}),"\n",(0,i.jsx)(n.p,{children:"Now the Jenkins pipeline can be used to re/create the volume and to copy the certificate files to it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:'language-title="Jenkinsfile"',children:"pipeline {\n    agent any\n    environment {\n      CERT_DIR = \"${WORKSPACE}/docker/nginx/ssl\"\n    }\n   \n    stages {\n    \n        # The rest of the pipeline\n    \n        stage('Prepare Directories') {\n            steps {\n                sh '''\n                   # Create directory structure with proper permissions\n                    mkdir -p \"${CERT_DIR}\"\n                    chmod 700 \"${CERT_DIR}\"\n                    ls -al \"${CERT_DIR}\"\n                '''\n            }\n        }\n    \n        stage('Deploy Certificates') {\n        \n            steps {\n                script {\n                     // Using secret files\n                      withCredentials([\n                         file(credentialsId: 'nginx-ssl-cert', variable: 'SSL_CERT'),\n                         file(credentialsId: 'nginx-ssl-key', variable: 'SSL_KEY')\n                      ]) {\n                          sh \"\"\"\n                              # Copy certificates\n                              cp \"$SSL_CERT\" \"${CERT_DIR}/certificate.crt\"\n                              cp \"$SSL_KEY\" \"${CERT_DIR}/private.key\"\n                    \n                              # Set proper permissions\n                              chmod 644 \"${CERT_DIR}/certificate.crt\"\n                              chmod 600 \"${CERT_DIR}/private.key\"\n                    \n                          \"\"\"\n                     }\n                }\n            }\n        }\n        \n        stage('Prepare SSL Volume') {\n            steps {\n                script {\n                    sh '''\n                        # First create or clear the volume\n                        docker run --rm -v jenkins_ssl_certs:/ssl alpine sh -c \"rm -rf /ssl/* && mkdir -p /ssl\"\n    \n                        # Then copy the certificates from the workspace\n                        docker cp \"${CERT_DIR}/.\" $(docker create --rm -v jenkins_ssl_certs:/ssl alpine sh):/ssl/\n    \n                        # Finally set the permissions\n                        docker run --rm -v jenkins_ssl_certs:/ssl alpine sh -c \"\n                            chmod 644 /ssl/certificate.crt && \\\n                            chmod 600 /ssl/private.key\n                        \"\n    \n                    '''\n                }\n            }\n        }\n\n        stage(\"Build and start docker compose services\") {\n          steps {\n            sh '''\n               cd ./apps/money-tracker-ui/jenkins\n               docker compose stop\n               docker stop clematis-money-tracker-ui || true && docker rm clematis-money-tracker-ui || true\n               docker stop clematis-money-tracker-ui-demo || true && docker rm clematis-money-tracker-ui-demo || true\n               docker compose build\n               docker compose up -d\n            '''\n          }\n        }\n\n    }\n    \n    post {\n        always {\n           // Clean up sensitive files after use\n          sh '''\n              if [ -d \"${CERT_DIR}\" ]; then rm -rf \"${CERT_DIR}\"; fi\n           '''\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"To recap:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create the directory to store certificate in the workspace"}),"\n",(0,i.jsx)(n.li,{children:"Copy the certificate to the directory created above"}),"\n",(0,i.jsx)(n.li,{children:"Prepare an SSL volume and copy the certificate to it."}),"\n",(0,i.jsx)(n.li,{children:"Deploy the applications to the Docker containers"}),"\n",(0,i.jsx)(n.li,{children:"Remove the directory with certificates from the workspace"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(96540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);