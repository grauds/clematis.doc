"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[7659],{15217:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"recipe-book/java/streaming","title":"Streaming API","description":"Some streaming tricks for routine tasks:","source":"@site/docs/recipe-book/java/streaming.md","sourceDirName":"recipe-book/java","slug":"/recipe-book/java/streaming","permalink":"/clematis.doc/docs/recipe-book/java/streaming","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"streams","permalink":"/clematis.doc/docs/tags/streams"}],"version":"current","lastUpdatedAt":1753985498000,"frontMatter":{"tags":["streams"]},"sidebar":"tutorialSidebar","previous":{"title":"Prefix Sum","permalink":"/clematis.doc/docs/recipe-book/java/prefix_sum"},"next":{"title":"Jenkins"}}');var a=t(74848),i=t(28453);const s={tags:["streams"]},o="Streaming API",l={},c=[{value:"Reading a file line by line and flatting words out to an array",id:"reading-a-file-line-by-line-and-flatting-words-out-to-an-array",level:2},{value:"Reading a line and turning it to numbers",id:"reading-a-line-and-turning-it-to-numbers",level:2},{value:"Counting the same numbers in the array",id:"counting-the-same-numbers-in-the-array",level:2},{value:"Counting the same numbers in the array with positions",id:"counting-the-same-numbers-in-the-array-with-positions",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"streaming-api",children:"Streaming API"})}),"\n",(0,a.jsx)(n.p,{children:"Some streaming tricks for routine tasks:"}),"\n",(0,a.jsx)(n.h2,{id:"reading-a-file-line-by-line-and-flatting-words-out-to-an-array",children:"Reading a file line by line and flatting words out to an array"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'    String[] words = reader\n        .lines()\n        .map(l -> l.split("\\\\s+"))\n        .flatMap(Arrays::stream)\n        .map(w -> w.replaceAll("[^a-zA-Z]",""))\n        .map(String::toLowerCase)\n        .filter(w -> !w.isEmpty())\n        .toArray(String[]::new);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"reading-a-line-and-turning-it-to-numbers",children:"Reading a line and turning it to numbers"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'    int[] numbers = Arrays.stream(reader.readLine().split("\\\\s+"))\n                     .mapToInt(Integer::parseInt)\n                     .toArray();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"counting-the-same-numbers-in-the-array",children:"Counting the same numbers in the array"}),"\n",(0,a.jsx)(n.p,{children:"...and displaying a histogram (assuming no positions are skipped):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'    int[] n = Arrays.stream(reader.readLine().split("\\\\s+"))\n        .mapToInt(Integer::parseInt)\n        .boxed() // convert int to Integer\n        .collect(Collectors.toMap(\n            i -> i,   // key: the number itself\n            i -> 1,   // counter value = +1\n            Integer::sum   // merge function: sum values with the same key\n        ))\n        .entrySet().stream() // iterate over map entries\n        .sorted(Map.Entry.comparingByKey())  // sort by key\n        .mapToInt(Map.Entry::getValue) // extract values\n        .toArray();\n'})}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"[1 2 3 4 5 6 5 4 7 8] -> [1, 1, 1, 2, 2, 1, 1, 1]"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"counting-the-same-numbers-in-the-array-with-positions",children:"Counting the same numbers in the array with positions"}),"\n",(0,a.jsx)(n.p,{children:"A slightly different example with positions preserved, for example, pos. #7 and #8 are\nmissing, so they are missing from the result too:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'    int[][] n = Arrays.stream(reader.readLine().split("\\\\s+"))\n        .mapToInt(Integer::parseInt)\n        .boxed() // convert int to Integer\n        .collect(Collectors.toMap(\n            i -> i,          // key: the number itself\n            i -> 1,                // value = +1\n            Integer::sum                   // merge function: sum values with the same key\n        ))\n        .entrySet().stream()\n        .sorted(Map.Entry.comparingByKey())\n        .map(e -> new int[]{e.getKey(), e.getValue()})\n        .toArray(int[][]::new); \n'})}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"[1 4 5 6 2 3 4 2 6 9] -> [[1, 1],[2, 2], [3, 1], [4, 2], [5, 1], [6, 2], [9, 1]]"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(96540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);