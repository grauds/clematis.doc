"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[8486],{17950:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"web-applications/logging/logging","title":"Runtime Management","description":"There is a pool of useful diagnostics available for the running Spring applications.","source":"@site/docs/web-applications/logging/logging.md","sourceDirName":"web-applications/logging","slug":"/web-applications/logging/","permalink":"/clematis.doc/docs/web-applications/logging/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"logging","permalink":"/clematis.doc/docs/tags/logging"},{"inline":true,"label":"mdc","permalink":"/clematis.doc/docs/tags/mdc"}],"version":"current","lastUpdatedAt":1742987316000,"sidebarPosition":15,"frontMatter":{"sidebar_position":15,"tags":["logging","mdc"]},"sidebar":"tutorialSidebar","previous":{"title":"Data Access Objects","permalink":"/clematis.doc/docs/web-applications/serving-data/data-access-objects"},"next":{"title":"Backend Testing","permalink":"/clematis.doc/docs/web-applications/backend-testing"}}');var t=i(74848),o=i(28453);const a={sidebar_position:15,tags:["logging","mdc"]},s="Runtime Management",l={},c=[{value:"Logback",id:"logback",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Log Annotations",id:"log-annotations",level:3},{value:"Mapped Diagnostic Context (MDC)",id:"mapped-diagnostic-context-mdc",level:2},{value:"Transaction Identifiers",id:"transaction-identifiers",level:3},{value:"Runtime Diagnostic With JMX",id:"runtime-diagnostic-with-jmx",level:2},{value:"Configure VisualVM for JMXMP",id:"configure-visualvm-for-jmxmp",level:3}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"runtime-management",children:"Runtime Management"})}),"\n",(0,t.jsx)(e.p,{children:"There is a pool of useful diagnostics available for the running Spring applications."}),"\n",(0,t.jsx)(e.h2,{id:"logback",children:"Logback"}),"\n",(0,t.jsxs)(e.p,{children:["Logging is being done with the help of ",(0,t.jsx)(e.a,{href:"https://logback.qos.ch/",children:"Logback"})," library. Spring brings in Logback with\n",(0,t.jsx)(e.code,{children:"spring-jcl"})," which is set up with a ",(0,t.jsx)(e.code,{children:"spring-boot-starter-logging"})," starter,\nand the latter is in turn a dependency for some other Spring Boot starters, for example ",(0,t.jsx)(e.code,{children:"spring-boot-starter-web"}),"."]}),"\n",(0,t.jsx)(e.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(e.p,{children:["Clematis applications use ",(0,t.jsx)(e.code,{children:"logback-spring.xml"})," configuration file to be able to add Spring Boot\n",(0,t.jsx)(e.a,{href:"https://docs.spring.io/spring-boot/reference/features/logging.html#features.logging.logback-extensions",children:"Logback Extensions"}),"."]}),"\n",(0,t.jsx)(e.p,{children:"The full configuration file is below. It includes configuration for console and file logging, history settings,\nMDC settings, the ability to change configuration on runtime with JMX and for level of logging:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",metastring:'title="src/main/resources/logback-spring.xml"',children:'<configuration>\n    \n    <springProperty name="LOG_PATH" source="logging.file.path" defaultValue="logs/" />\n    <jmxConfigurator/>\n\n    <conversionRule conversionWord="mdc" converterClass="org.clematis.logging.CustomMDCConverter" />\n\n    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">\n        <target>System.out</target>\n        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">\n            <evaluator>\n                <matcher>\n                    <Name>first_retry</Name>\n                    \x3c!-- filter out initial retry messages --\x3e\n                    <regex>Retry: count=0</regex>\n                </matcher>\n                <expression>first_retry.matches(formattedMessage)</expression>\n            </evaluator>\n            <OnMismatch>NEUTRAL</OnMismatch>\n            <OnMatch>DENY</OnMatch>\n        </filter>\n        <encoder>\n            <pattern>[%date{"yyyy-MM-dd\'T\'HH:mm:ss,SSSXXX"}] [%thread] %level %logger{5} - %mdc %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <property name="LOG_HISTORY" value="7" />\n    <property name="LOG_LEVEL" value="INFO" />\n\n    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">\n\n        <file>${LOG_PATH}/api.log</file>\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            \x3c!-- daily rollover --\x3e\n            <fileNamePattern>${LOG_PATH}/api.%d.log</fileNamePattern>\n            <maxHistory>${LOG_HISTORY}</maxHistory>\n        </rollingPolicy>\n\n        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">\n            <evaluator>\n                <matcher>\n                    <Name>first_retry</Name>\n                    \x3c!-- filter out initial retry messages --\x3e\n                    <regex>Retry: count=0</regex>\n                </matcher>\n\n                <expression>first_retry.matches(formattedMessage)</expression>\n            </evaluator>\n            <OnMismatch>NEUTRAL</OnMismatch>\n            <OnMatch>DENY</OnMatch>\n        </filter>\n        <encoder>\n            <pattern>[%date{"yyyy-MM-dd\'T\'HH:mm:ss,SSSXXX"}] [%thread] %level %logger{5} - %mdc %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <root level="${LOG_LEVEL}">\n        <appender-ref ref="file"/>\n        <appender-ref ref="stdout" />\n    </root>\n\n    <logger name="org.clematis" level="${LOG_LEVEL}"/>\n    <logger name="jworkspace" level="${LOG_LEVEL}"/>\n    <logger name="org.springframework" level="${LOG_LEVEL}"/>\n\n</configuration>\n'})}),"\n",(0,t.jsxs)(e.p,{children:["The configuration of target directory for logs in the file\nabove depends on ",(0,t.jsx)(e.code,{children:"logging.file.path"})," variable from Spring application properties:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",metastring:'title="src/main/resources/application.yml"',children:"logging:\n  file:\n    path:\n      ${LOG_PATH}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["This variable in turn depends on the presence of environment variable ",(0,t.jsx)(e.code,{children:"LOG_PATH"}),"."]}),"\n",(0,t.jsx)(e.h3,{id:"log-annotations",children:"Log Annotations"}),"\n",(0,t.jsxs)(e.p,{children:["Lombok helps with logging by providing a number of ",(0,t.jsx)(e.a,{href:"https://projectlombok.org/features/log",children:"annotations"}),". The\n",(0,t.jsx)(e.code,{children:"@Log"})," annotation, which is used accross Clematis applications, is for ",(0,t.jsx)(e.code,{children:"java.util.logging"})," which can be used with Spring because\n",(0,t.jsx)(e.a,{href:"https://www.slf4j.org/legacy.html#jul-to-slf4j",children:(0,t.jsx)(e.code,{children:"jul-to-slf4j"})})," bridge is present\nif ",(0,t.jsx)(e.a,{href:"https://docs.spring.io/spring-boot/appendix/dependency-versions/coordinates.html",children:"Spring Boot with dependencies management"}),"\nis on."]}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:["It is encouraged to use Lombok ",(0,t.jsx)(e.code,{children:"@slf4j"})," annotation for classes."]})}),"\n",(0,t.jsx)(e.p,{children:"Additional configuration for Java Util Logging is required in Logback, because of the following\ndefault behavior:"}),"\n",(0,t.jsx)(e.admonition,{title:"Important tip from Spring",type:"tip",children:(0,t.jsx)(e.p,{children:"For an application in a servlet container or application server,\nlogging performed with the Java Util Logging API is not routed into your application\u2019s logs.\nThis prevents logging performed by the container or other applications that have been deployed to\nit from appearing in your application\u2019s logs."})}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsxs)(e.p,{children:["Slf4J, Log4J, Logback are the projects with ",(0,t.jsx)(e.a,{href:"https://www.qos.ch/",children:"QOS.ch Sarl"}),"\nas a founding contributor."]})}),"\n",(0,t.jsx)(e.h2,{id:"mapped-diagnostic-context-mdc",children:"Mapped Diagnostic Context (MDC)"}),"\n",(0,t.jsxs)(e.p,{children:["As it is noted in the previous paragraph, it's preferable to use ",(0,t.jsx)(e.code,{children:"@slf4j"})," logging. This is\nmainly because ",(0,t.jsx)(e.a,{href:"https://www.slf4j.org/manual.html#mdc",children:"MDC feature"})," relies on it. For\n",(0,t.jsx)(e.code,{children:"java.util.logging"})," the information will need to be retrieved by a user code."]}),"\n",(0,t.jsx)(e.h3,{id:"transaction-identifiers",children:"Transaction Identifiers"}),"\n",(0,t.jsx)(e.p,{children:"Clematis applications need only a small portion of information to be shared in MDC,\nand a transaction identifier is the most important case:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"org.clematis.logging.web.TransactionIdFilter"}),": intercepts client queries and checks for presence of\ntransaction identifiers in HTTP headers. If no identifier is found, a new one is\ncreated and added to an MDC context:"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:'title="org.clematis.logging.web.TransactionIdFilter"',children:'@Component(value = "transactionIdFilter")\npublic class TransactionIdFilter extends OncePerRequestFilter {\n\n    @Value("${clematis.transactionId.httpHeader}")\n    private String transactionIdHeader;\n\n    @Autowired\n    private TransactionIdService transactionIdService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws IOException, ServletException {\n\n        final String transactionId = request.getHeader(transactionIdHeader);\n        try (\n            TransactionIdService.Transaction transaction = transactionIdService.startTransaction(transactionId)) {\n            response.addHeader(transactionIdHeader,\n                URLEncoder.encode(transaction.id(), StandardCharsets.UTF_8.displayName()));\n            filterChain.doFilter(request, response);\n        }\n    }\n}\n'})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"org.clematis.logging.service.TransactionIdService"}),": generates a new transaction id,\nuses MDC to store the id and deletes it after id is no longer used. This is being done\nfor every running request thread in the Spring application:"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:'title="org.clematis.logging.service.impl.TransactionIdServiceImpl"',children:'@Component(value = TransactionIdService.BEAN)\npublic class TransactionIdServiceImpl implements TransactionIdService {\n\n    @Value("${clematis.transactionId.logKey}")\n    private String transactionIdLogKey;\n\n    @Override\n    public Transaction startTransaction(@Nullable String id) {\n        final String transactionId = StringUtils.isBlank(id) ? generateId() : id;\n        return new TransactionImpl(transactionIdLogKey, transactionId);\n    }\n\n    @Override\n    public String getCurrentTransactionId() {\n        return MDC.get(transactionIdLogKey);\n    }\n\n    private static String generateId() {\n        return UUID.randomUUID().toString();\n    }\n\n    private record TransactionImpl(String mdcKey, String id) implements Transaction {\n\n        private TransactionImpl(String mdcKey, String id) {\n            this.mdcKey = mdcKey;\n            this.id = id;\n            MDC.put(mdcKey, id);\n        }\n\n        @Override\n        public void close() {\n            MDC.remove(mdcKey);\n        }\n\n        @Override\n        public String toString() {\n            return "TransactionImpl{id=\'" + id + "\'}";\n        }\n    }\n}\n'})}),"\n",(0,t.jsxs)(e.ol,{start:"3",children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"org.clematis.logging.CustomMDCConverter"}),": is used with Logback configuration\nto format MDC information and to actually insert a transaction identifier into logs:"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",metastring:'title="src/main/resources/logback-spring.xml"',children:'<configuration>\n    <conversionRule conversionWord="mdc" converterClass="org.clematis.logging.CustomMDCConverter" />\n\n    <encoder>\n      <pattern>[%date{"yyyy-MM-dd\'T\'HH:mm:ss,SSSXXX"}] [%thread] %level %logger{5} - %mdc %msg%n</pattern>\n    </encoder>\n    \n</configuration>\n'})}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsx)(e.p,{children:"These classes will soon be available as a shared library."})}),"\n",(0,t.jsx)(e.h2,{id:"runtime-diagnostic-with-jmx",children:"Runtime Diagnostic With JMX"}),"\n",(0,t.jsxs)(e.p,{children:["Clematis applications use Spring JMX ",(0,t.jsx)(e.a,{href:"https://docs.spring.io/spring-framework/reference/integration/jmx/jsr160.html#jmx-jsr160-server",children:"to create,\nstart, and expose"}),"\na ",(0,t.jsx)(e.a,{href:"https://jcp.org/en/jsr/detail?id=160",children:"JSR-160"}),"\n",(0,t.jsx)(e.a,{href:"https://docs.oracle.com/cd/E19698-01/816-7609/connectors-116/index.html",children:"connector"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'import org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jmx.support.ConnectorServerFactoryBean;\n\n/**\n * JMXMP configuration \n */\n@Configuration\npublic class ConnectorServiceFactoryBeanProvider {\n\n    @Value("${spring.jmx.url}")\n    private String url;\n\n    @Bean\n    public ConnectorServerFactoryBean connectorServerFactoryBean() {\n        final ConnectorServerFactoryBean connectorServerFactoryBean = new ConnectorServerFactoryBean();\n        connectorServerFactoryBean.setServiceUrl(url);\n        return connectorServerFactoryBean;\n    }\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"spring.jmx.url"})," is a variable from Spring application properties, in turn\nit depends on environment variables ",(0,t.jsx)(e.code,{children:"JMXMP_HOST"})," and ",(0,t.jsx)(e.code,{children:"JMXMP_PORT"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",metastring:'title="src/main/resources/application.yml"',children:'spring:\n  jmx:\n    enabled: true\n    url: service:jmx:jmxmp://${JMXMP_HOST}:${JMXMP_PORT}/\nmanagement:\n  endpoints:\n    jmx:\n      exposure:\n        include: "health,info,env,beans"\n    web:\n      exposure:\n        include: "health,info,env,beans"\n'})}),"\n",(0,t.jsx)(e.p,{children:"The management section provides configuration for beans exposure over JMX or HTTP protocols."}),"\n",(0,t.jsx)(e.admonition,{type:"warning",children:(0,t.jsx)(e.p,{children:"Clematis JMXMP Connectors are being used without optional SSL and SASL, however, it\ncan be turned on in no time if used outside the sandbox."})}),"\n",(0,t.jsx)(e.h3,{id:"configure-visualvm-for-jmxmp",children:"Configure VisualVM for JMXMP"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:"https://visualvm.github.io/",children:"VisualVM"})," doesn't work with JMXMP protocol out of the box; however, it can be added to it."]}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Download ",(0,t.jsx)(e.code,{children:"jmxremote_optional-repackaged-5.0.jar"})," from Maven:"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'curl --output jmxremote_optional-repackaged-5.0.jar "https://repo1.maven.org/maven2/org/glassfish/main/external/jmxremote_optional-repackaged/5.0/jmxremote_optional-repackaged-5.0.jar"\n'})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:"Install VisualVM for your platform"}),"\n",(0,t.jsxs)(e.li,{children:["Add ",(0,t.jsx)(e.code,{children:"jmxremote_optional-repackaged-5.0.jar"})," to VisualVM classpath, for example, for macOS:"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"mv jmxremote_optional-repackaged-5.0.jar /Applications/VisualVM.app/Contents/Resources/visualvm/platform/lib/\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"4",children:["\n",(0,t.jsx)(e.li,{children:"Run VisualVM and create a JMXMP connection leaving fields for credentials blank and do not\nrequire SSL connection this time:"}),"\n"]}),"\n",(0,t.jsx)("img",{src:i(56596).A,style:{width:"500px"},alt:""}),"\n",(0,t.jsxs)(e.ol,{start:"5",children:["\n",(0,t.jsx)(e.li,{children:"Click OK and the connection should be established:"}),"\n"]}),"\n",(0,t.jsx)("img",{src:i(82891).A,style:{width:"500px"},alt:""})]})}function g(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},56596:(n,e,i)=>{i.d(e,{A:()=>r});const r=i.p+"assets/images/jmxmp-d9221d8513196b078f15d11fba43798c.png"},82891:(n,e,i)=>{i.d(e,{A:()=>r});const r=i.p+"assets/images/visualvm-fff64c990c1989af11a4a8ff6f9e2537.png"},28453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>s});var r=i(96540);const t={},o=r.createContext(t);function a(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);