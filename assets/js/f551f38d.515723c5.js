"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[6367],{76076:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"web-applications-security/spring-boot-migration","title":"Update Spring Boot 2 Backend","description":"After a new instance of Keycloak is up and running,","source":"@site/docs/web-applications-security/spring-boot-migration.md","sourceDirName":"web-applications-security","slug":"/web-applications-security/spring-boot-migration","permalink":"/clematis.doc/docs/web-applications-security/spring-boot-migration","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"spring-boot","permalink":"/clematis.doc/docs/tags/spring-boot"},{"inline":true,"label":"keycloak","permalink":"/clematis.doc/docs/tags/keycloak"}],"version":"current","lastUpdatedAt":1754239272000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"tags":["spring-boot","keycloak"]},"sidebar":"tutorialSidebar","previous":{"title":"Frontend Switch to HTTPS","permalink":"/clematis.doc/docs/web-applications-security/angular-https"},"next":{"title":"Recipe Book","permalink":"/clematis.doc/docs/recipe-book/"}}');var o=i(74848),a=i(28453);const r={sidebar_position:4,tags:["spring-boot","keycloak"]},c="Update Spring Boot 2 Backend",s={},l=[{value:"Updating Keycloak Endpoint",id:"updating-keycloak-endpoint",level:2},{value:"Importing Keycloak Certificate",id:"importing-keycloak-certificate",level:2},{value:"Jenkins Configuration",id:"jenkins-configuration",level:3},{value:"Jenkins Pipeline Modification",id:"jenkins-pipeline-modification",level:3},{value:"Docker Container Build Modification",id:"docker-container-build-modification",level:3},{value:"Letting Spring Know It Is Behind A Proxy",id:"letting-spring-know-it-is-behind-a-proxy",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"update-spring-boot-2-backend",children:"Update Spring Boot 2 Backend"})}),"\n",(0,o.jsx)(n.p,{children:"After a new instance of Keycloak is up and running,\nSpring Boot 2 backend can work with the HTTPS version of the new instance after\nthe Keycloak URL and the application shared secret are updated. There is only one condition to meet:\nthe Keycloak certificate has to be imported into the Docker container of Spring Boot backend."}),"\n",(0,o.jsx)(n.h2,{id:"updating-keycloak-endpoint",children:"Updating Keycloak Endpoint"}),"\n",(0,o.jsx)(n.p,{children:"As a reminder, the following dependency is being used:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-groovy",metastring:'title="build.gradle"',children:"dependencies {\n//...\n    implementation 'org.keycloak:keycloak-spring-boot-starter:25.0.3'\n//...    \n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Checking the application configuration:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="src/main/resources/application.yml"',children:'spring:\n  auth:\n    authServer: "${KEYCLOAK_URL}:${KEYCLOAK_PORT}/realms/${keycloak.realm}/protocol/openid-connect"\n    clientSecret: ${KEYCLOAK_SECRET}\n'})}),"\n",(0,o.jsx)(n.p,{children:"The placeholders are properties taken from the environment variables for the Docker container,\nfor example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"KEYCLOAK_URL=http://192.168.1.157\nKEYCLOAK_PORT=443\nKEYCLOAK_SECRET=${KEYCLOAK_SECRET}\nKEYCLOAK_CLIENT=clematis-money-tracker-api\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And I also had to update Jenkins secret named ",(0,o.jsx)(n.code,{children:"MT_API_KEYCLOAK_SECRET"})," which is being copied\ninto the ",(0,o.jsx)(n.code,{children:"KEYCLOAK_SECRET"})," during the build."]}),"\n",(0,o.jsx)(n.admonition,{title:"Can Be Done Better",type:"tip",children:(0,o.jsx)(n.p,{children:"Keycloak adapter won't support Spring Boot 3, so migration off this dependency is planned, also improving\nmaintainability of the security layer."})}),"\n",(0,o.jsx)(n.h2,{id:"importing-keycloak-certificate",children:"Importing Keycloak Certificate"}),"\n",(0,o.jsxs)(n.p,{children:["The same certificate which I ",(0,o.jsx)(n.a,{href:"/clematis.doc/docs/web-applications-security/keycloak-https#how-to-trust-a-certificate",children:"downloaded earlier"})," to install on my MacBook, I will\nuse to make the next step:"]}),"\n",(0,o.jsx)("img",{src:i(77038).A,width:"730px"}),"\n",(0,o.jsx)(n.p,{children:"I have to add it to the Java trusted certificate store in the Docker container\nof the Money Tracker API application for\nthe application to trust the certificate and establish an HTTPS connection to Keycloak."}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Java ",(0,o.jsx)(n.code,{children:"cacerts"})," file as a trusted certificate store, typically located in the jre/lib/security directory.\nThis file holds certificates from ",(0,o.jsx)(n.a,{href:"https://docs.oracle.com/cd/E19860-01/html/E37451/gskee.html#scrolltoc",children:"Certificate Authorities (CAs)"}),"\nthat are trusted by the Java Runtime Environment."]})}),"\n",(0,o.jsx)(n.h3,{id:"jenkins-configuration",children:"Jenkins Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Since the builds and deploys are handled by Jenkins, the ultimate destination for Keycloak certificate is the\ninternal ",(0,o.jsx)(n.a,{href:"https://www.jenkins.io/doc/book/using/using-credentials/",children:"Jenkins storage for secret files"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The ID for the secret file in this example is ",(0,o.jsx)(n.code,{children:"keycloak_certificate"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"jenkins-pipeline-modification",children:"Jenkins Pipeline Modification"}),"\n",(0,o.jsx)(n.p,{children:"Now then we have a secret file in Jenkins, we just need to copy it to the workspace filesystem\nwhere the Docker build process can find it, for example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jenkins",metastring:'title="Jenkinsfile"',children:"     stage('Build docker image') {\n        steps {\n            script {\n               // Using secret file\n               withCredentials([\n                  file(credentialsId: 'keycloak_certificate', variable: 'SSL_CERT'),\n               ]) {\n                  sh \"\"\"\n                     cp \"$SSL_CERT\" \"${WORKSPACE}/jenkins/keycloak.pem\"\n                     docker build -t clematis.mt.api .\n                  \"\"\"\n               }\n            }\n        }\n    }\n    \n    // clean up the pem file \n    post {\n        always {\n            sh '''\n               rm -rf \"${WORKSPACE}/jenkins/keycloak.pem\"\n            '''\n        }\n    }\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The line ",(0,o.jsx)(n.code,{children:'cp "$SSL_CERT" "${WORKSPACE}/jenkins/keycloak.pem"'})," will copy the file from\nthe secret storage to the file system."]}),"\n",(0,o.jsx)(n.h3,{id:"docker-container-build-modification",children:"Docker Container Build Modification"}),"\n",(0,o.jsxs)(n.p,{children:["Docker will have to import the certificate with ",(0,o.jsx)(n.code,{children:"keytool"}),", so the original file gets\ntwo more lines of code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",metastring:'title="Dockerfile"',children:"# Import Keycloak Cert to JRE cacerts\nCOPY jenkins/keycloak.pem /tmp/keycloak.pem\nRUN keytool -importcert -file /tmp/keycloak.pem -alias keycloak -cacerts -storepass changeit -noprompt\n"})}),"\n",(0,o.jsx)(n.p,{children:"After build and redeployment, the application is able to connect to Keycloak securely and validate\nthe tokens sent to its REST API."}),"\n",(0,o.jsx)(n.p,{children:"Note that the REST API itself is still served over HTTP."}),"\n",(0,o.jsx)(n.h2,{id:"letting-spring-know-it-is-behind-a-proxy",children:"Letting Spring Know It Is Behind A Proxy"}),"\n",(0,o.jsx)(n.p,{children:"The last but not the least is for Spring to be able to generate HATEOAS links with a correct address\nand protocol. However, java backend doesn't know anything about the frontend load balancer or proxy. In\nour case we have an Openresty proxy working for Angular and serving content in HTTPS. Links generated\nfor Spring HATEOAS will be the direct ones, like in the example below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="https://192.168.1.118:18443/api/commodities/5"',children:'{\n  "_links": {\n    "self": {\n      "href": "http://192.168.1.119:8080/api/commodities/52"\n    },\n    "commodity": {\n      "href": "http://192.168.1.119:8080/api/commodities/52{?projection}",\n      "templated": true\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"To fix this, one should add the following configuration to Spring Boot:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="application.yml"',children:"server:\n  forward-headers-strategy: framework\n"})}),"\n",(0,o.jsx)(n.p,{children:"and the following bean to the Spring Boot application:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Bean\npublic ForwardedHeaderFilter forwardedHeaderFilter() {\n   return new ForwardedHeaderFilter();\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To check if the ",(0,o.jsx)(n.code,{children:"X-forwarded-*"})," are actually being sent by Openresty:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sudo tcpdump -A -i any port 18085 | grep -i forwarded\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},77038:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/valid_keycloak_certificate-b0a2a673f198b14af491910221886457.png"},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var t=i(96540);const o={},a=t.createContext(o);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);