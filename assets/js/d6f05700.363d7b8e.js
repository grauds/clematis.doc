"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[3035],{81680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"web-applications/data-querying/cosmic","title":"Cosmic And RTK","description":"Cosmic is using Redux Toolkit Query to get","source":"@site/docs/web-applications/data-querying/cosmic.md","sourceDirName":"web-applications/data-querying","slug":"/web-applications/data-querying/cosmic","permalink":"/clematis.doc/docs/web-applications/data-querying/cosmic","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"RTK_query","permalink":"/clematis.doc/docs/tags/rtk-query"},{"inline":true,"label":"fetch_API","permalink":"/clematis.doc/docs/tags/fetch-api"},{"inline":true,"label":"api_slice","permalink":"/clematis.doc/docs/tags/api-slice"},{"inline":true,"label":"RTK_cache","permalink":"/clematis.doc/docs/tags/rtk-cache"},{"inline":true,"label":"custom_react_hook","permalink":"/clematis.doc/docs/tags/custom-react-hook"},{"inline":true,"label":"mutation","permalink":"/clematis.doc/docs/tags/mutation"}],"version":"current","lastUpdatedAt":1742201711000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3,"tags":["RTK_query","fetch_API","api_slice","RTK_cache","custom_react_hook","mutation"]},"sidebar":"tutorialSidebar","previous":{"title":"Pomodoro / Reddit Thunks","permalink":"/clematis.doc/docs/web-applications/data-querying/pomodoro"},"next":{"title":"Frontend Testing","permalink":"/clematis.doc/docs/web-applications/testing/"}}');var s=n(74848),i=n(28453);const o={sidebar_position:3,tags:["RTK_query","fetch_API","api_slice","RTK_cache","custom_react_hook","mutation"]},r="Cosmic And RTK",c={},l=[{value:"Hateoas API Slice",id:"hateoas-api-slice",level:2},{value:"<code>EndpointBuilder</code>",id:"endpointbuilder",level:3},{value:"Manual Creation Of An Endpoint",id:"manual-creation-of-an-endpoint",level:3},{value:"Fetch API",id:"fetch-api",level:2},{value:"Typed Responses",id:"typed-responses",level:2},{value:"Cache Tags And Re-fetching",id:"cache-tags-and-re-fetching",level:2},{value:"Generated React Hooks",id:"generated-react-hooks",level:2},{value:"Query: Example Usage In A Component",id:"query-example-usage-in-a-component",level:2},{value:"Mutation: Example Usage In A Component",id:"mutation-example-usage-in-a-component",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"cosmic-and-rtk",children:"Cosmic And RTK"})}),"\n",(0,s.jsxs)(t.p,{children:["Cosmic is using ",(0,s.jsx)(t.a,{href:"https://redux-toolkit.js.org/rtk-query/overview",children:"Redux Toolkit Query"})," to get\ndata from the Cosmic API Hateoas backend:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/store.ts"',children:"export const store = configureStore({\n    reducer: combineSlices(rootSlice, cosmicApi),\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware().concat(cosmicApi.middleware)\n})\n"})}),"\n",(0,s.jsx)(t.h2,{id:"hateoas-api-slice",children:"Hateoas API Slice"}),"\n",(0,s.jsxs)(t.p,{children:["Where ",(0,s.jsx)(t.code,{children:"cosmicApi"})," is an ",(0,s.jsx)(t.a,{href:"https://redux-toolkit.js.org/rtk-query/api/created-api/redux-integration",children:"API Slice"}),".\nThere can be more slices for every API used, all together combined with ",(0,s.jsx)(t.code,{children:"configureStore"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/features/cosmic/cosmicSlice.ts"',children:"export const cosmicApi = createApi({\n    reducerPath: 'cosmicApi',\n    baseQuery: fetchBaseQuery({\n        mode: 'cors',\n        baseUrl: 'http://backend.address',\n        headers: {\n            Accept: 'application/hal+json'\n        }\n    })\n    //..\n})\n"})}),"\n",(0,s.jsx)(t.h3,{id:"endpointbuilder",children:(0,s.jsx)(t.code,{children:"EndpointBuilder"})}),"\n",(0,s.jsxs)(t.p,{children:["Each slice sets up a number of endpoints which can be created with ",(0,s.jsx)(t.code,{children:"EndpointBuilder"}),",\nfor example:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/features/cosmic/cosmicSlice.ts"',children:"getProjectById: builder.query<Project, string>({\n    query: (id) => `api/projects/${id}`\n})\n"})}),"\n",(0,s.jsx)(t.h3,{id:"manual-creation-of-an-endpoint",children:"Manual Creation Of An Endpoint"}),"\n",(0,s.jsxs)(t.p,{children:["More complex or non-standard endpoints can be created manually. For example,\nif we don't know the URL of the resource in advance, as it is coming from Hateoas response as\nan absolute URL, the endpoint will just ignore the value of the ",(0,s.jsx)(t.code,{children:"baseQuery.baseUrl"}),"\nin API and will use this absolute URL:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/features/cosmic/cosmicSlice.ts"',children:"getProjectByUrl: builder.query<Project, string>({\n    queryFn: async (url) => {\n        const response = await fetch(\n            `${url}`\n        );\n        const data: Project = await response.json();\n        return { data };\n    }\n})\n"})}),"\n",(0,s.jsx)(t.p,{children:"In fact, the whole conversation with Hypermedia backend is built on this principle, which\nis a main feature of Hateoas and allows the UI to be decoupled from the resources' URLs implementation."}),"\n",(0,s.jsx)(t.h2,{id:"fetch-api",children:"Fetch API"}),"\n",(0,s.jsxs)(t.p,{children:["RTK uses ",(0,s.jsx)(t.a,{href:"https://redux-toolkit.js.org/rtk-query/api/fetchBaseQuery",children:(0,s.jsx)(t.code,{children:"fetchBaseQuery"})}),"\nwhich is a thin wrapper around ",(0,s.jsx)(t.a,{href:"https://www.w3schools.com/js/js_api_fetch.asp",children:"fetch API"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"typed-responses",children:"Typed Responses"}),"\n",(0,s.jsx)(t.p,{children:"As usually, for JSON to be parsed in a typed manner, there are a number of classes, including\nthe ones that cater for Hateoas responses with links, not just whose which describe\nthe business domain of the application:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/model.ts"',children:"export type HateoasTypeCollection<K extends string, T> \n                 = { [P in K]: T[] } & {}\n\nexport class Page {\n    size: number = 0;\n    totalElements: number = 0;\n    totalPages: number = 0;\n    number: number = 0;\n}\n\nexport type HateoasResponse<K extends string, T> = {\n    _embedded: HateoasTypeCollection<K, T>;\n    _links: HateoasLinks;\n    page: Page;\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"cache-tags-and-re-fetching",children:"Cache Tags And Re-fetching"}),"\n",(0,s.jsxs)(t.p,{children:["In the Cosmic API layer, get and search queries usually create cache tags, post and delete mutations\nremove cache tags. This triggers ",(0,s.jsx)(t.a,{href:"https://redux-toolkit.js.org/rtk-query/usage/automated-refetching",children:"data re-fetching"})," for the queries with affected tags."]}),"\n",(0,s.jsxs)(t.p,{children:["For example, when a list of projects is retrieved from the backend as a result of a\npaginated search, a tag ",(0,s.jsx)(t.code,{children:"Project"})," is set:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/features/cosmic/cosmicSlice.ts"',children:"filterProjects: builder.query<HateoasResponse<'data', Project>, IFilteringPageable>({\n    query: ({filter = '', page = 0, size = 5}) => `api/projects/search/filter?searchText=${filter}&sort=name&page=${page}&size=${size}`,\n    providesTags: ['Project']\n})\n"})}),"\n",(0,s.jsx)(t.p,{children:"If a project is created, edited or removed, this tag is also removed:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/features/cosmic/cosmicSlice.ts"',children:"createProject: builder.mutation<Project, INewProjectProps>({\n    query: ({ name, description }) => ({\n        url: `api/projects`,\n        method: 'POST',\n        body: { name, description }\n    }),\n    invalidatesTags: ['Project']\n})\n"})}),"\n",(0,s.jsx)(t.p,{children:"The first query is repeated to update the cache and rerender the user interface. Tags\ncan be any string, it is up to the application, not to RTK itself,\nto construct the relations between queries and mutations to keep the optimal cadence in data retrieval\nand refresh."}),"\n",(0,s.jsx)(t.h2,{id:"generated-react-hooks",children:"Generated React Hooks"}),"\n",(0,s.jsxs)(t.p,{children:["The ready-to-use React hooks also provided by RTK, they are\nadded to the ",(0,s.jsx)(t.code,{children:"API"})," object itself and ready to be exported, for instance:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export const {\n    useLazyGetProjectByIdQuery,\n    useLazyFilterProjectsQuery,\n    useLazyGetProjectRunsQuery,\n    useGetBalloonByUrlQuery,\n    useCreateProjectMutation,\n    useDeleteProjectMutation,\n    useCopyInputDataMutation,\n    useMoveInputDataMutation,\n    useSaveInputDataMutation,\n    useDeleteInputDataMutation,\n    useCalculateMutation\n} = cosmicApi\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The general format is ",(0,s.jsx)(t.a,{href:"https://redux-toolkit.js.org/rtk-query/api/created-api/hooks#hooks-overview",children:"use(Endpointname)(Query|Mutation)"})," -\nuse is prefixed, the first letter of your endpoint name is capitalized,\nthen Query or Mutation is appended depending on the type."]}),"\n",(0,s.jsx)(t.h2,{id:"query-example-usage-in-a-component",children:"Query: Example Usage In A Component"}),"\n",(0,s.jsx)(t.p,{children:"There are two options for how the query hooks can be used depending on their type. Normal queries or mutations\nare used as normal hooks on component render:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'jsx title="src/containers/ProjectContainer/ProjectContainer.tsx"',children:"import {\n    useGetBalloonByUrlQuery,\n    useLazyGetProjectRunsQuery\n} from \"@/lib/features/cosmic/cosmicSlice.ts\";\n\nexport function ProjectContainer(props: Readonly<IProjectContainerProps>): React.JSX.Element {\n // Normal hook\n    const {\n        data: balloon\n    } = useGetBalloonByUrlQuery(\n        inputData._links.balloon.href ?? ''\n    )\n    \n // Lazy hook\n    const [getProjectRuns, {data, isLoading}] = useLazyGetProjectRunsQuery()\n    \n // Then it can be used in a effect hook\n    useEffect(() => {\n        if (selectedProject && selectedProject._links.runs.href) {\n            getProjectRuns(selectedProject._links.runs.href);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedProject]);\n    \n// Result data (and other info like status and errors) is then referenced later\n    useEffect(() => {\n        setSelectedData(\n            (data as HateoasResponse<'data', InputData>)?._embedded.data\n                .find(elem => elem.id === selectedData?.id)\n        )\n    }, [data, selectedData?.id]);\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"mutation-example-usage-in-a-component",children:"Mutation: Example Usage In A Component"}),"\n",(0,s.jsx)(t.p,{children:"Mutation is 'lazy' by default, so it has only one scenario:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'jsx title="src/containers/ProjectContainer/ProjectContainer.tsx" ',children:'import {\n    useCopyInputDataMutation\n} from "@/lib/features/cosmic/cosmicSlice.ts";\n\nexport function ProjectContainer(props: Readonly<IProjectContainerProps>): React.JSX.Element {\n    \n    const [copyInputData] = useCopyInputDataMutation()\n    \n    //...\n    \n    function onClone(inputData: InputData): void {\n        copyInputData({\n            inputData: inputData,\n            project: selectedProject,\n        })\n    }\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(96540);const s={},i=a.createContext(s);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);