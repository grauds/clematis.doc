"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[3218],{62306:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"recipe-book/react/props-and-state","title":"Update State From Props","description":"Initial value for state is only used for the first render of the component, all later renders ignore the initial state","source":"@site/docs/recipe-book/react/props-and-state.md","sourceDirName":"recipe-book/react","slug":"/recipe-book/react/props-and-state","permalink":"/clematis.doc/docs/recipe-book/react/props-and-state","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"react","permalink":"/clematis.doc/docs/tags/react"},{"inline":true,"label":"state","permalink":"/clematis.doc/docs/tags/state"}],"version":"current","lastUpdatedAt":1748339770000,"frontMatter":{"tags":["react","state"]},"sidebar":"tutorialSidebar","previous":{"title":"React"},"next":{"title":"Pass Additional Styles As Props","permalink":"/clematis.doc/docs/recipe-book/react/styles-as-props"}}');var r=a(74848),o=a(28453);const s={tags:["react","state"]},i="Update State From Props",c={},l=[];function p(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"update-state-from-props",children:"Update State From Props"})}),"\n",(0,r.jsx)(t.p,{children:"Initial value for state is only used for the first render of the component, all later renders ignore the initial state\nvalue and take the current value from the state to render the component. Thus, to re-initialize the state again from the\nchanging props, for example, from the parent component, one should use an effect like in the following example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:"jsx",children:"export function InputDataForm({\n    inputData,\n}: Readonly<IInputDataFormProps>): React.JSX.Element {\n\n    const [inputDataCopy, setInputDataCopy] = useState<InputData>(inputData);\n\n    useEffect(() => {\n        setInputDataCopy(inputData);\n    }, [inputData]);\n\n    //...\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["From ",(0,r.jsx)(t.a,{href:"https://react.dev/reference/react/useState#usestate",children:"React, useState"}),":"]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"initialState: The value you want to initialize the state with.\nIt can be a value of any type, but there > is a special behavior for functions.\nThis argument is ignored after the initial render."}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>i});var n=a(96540);const r={},o=n.createContext(r);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);