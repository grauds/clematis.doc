"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[661],{74389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"web-applications/state-management","title":"State Management","description":"Money Tracker","source":"@site/docs/web-applications/state-management.md","sourceDirName":"web-applications","slug":"/web-applications/state-management","permalink":"/clematis.doc/docs/web-applications/state-management","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"stateless","permalink":"/clematis.doc/docs/tags/stateless"},{"inline":true,"label":"stateful","permalink":"/clematis.doc/docs/tags/stateful"},{"inline":true,"label":"redux","permalink":"/clematis.doc/docs/tags/redux"},{"inline":true,"label":"persistence","permalink":"/clematis.doc/docs/tags/persistence"},{"inline":true,"label":"dispatching","permalink":"/clematis.doc/docs/tags/dispatching"},{"inline":true,"label":"RTK","permalink":"/clematis.doc/docs/tags/rtk"}],"version":"current","lastUpdatedAt":1742201711000,"sidebarPosition":8,"frontMatter":{"sidebar_position":8,"tags":["stateless","stateful","redux","persistence","dispatching","RTK"]},"sidebar":"tutorialSidebar","previous":{"title":"Composable Components","permalink":"/clematis.doc/docs/web-applications/components"},"next":{"title":"Data Querying","permalink":"/clematis.doc/docs/web-applications/data-querying/"}}');var o=n(74848),r=n(28453);const i={sidebar_position:8,tags:["stateless","stateful","redux","persistence","dispatching","RTK"]},a="State Management",c={},d=[{value:"Money Tracker",id:"money-tracker",level:2},{value:"Pomodoro",id:"pomodoro",level:2},{value:"Declaration",id:"declaration",level:3},{value:"Persistent State",id:"persistent-state",level:3},{value:"Store Provider",id:"store-provider",level:3},{value:"Using <code>useDispatch</code> hook",id:"using-usedispatch-hook",level:3},{value:"Read Store Data",id:"read-store-data",level:3},{value:"Deprecation Notice",id:"deprecation-notice",level:3},{value:"Cosmic",id:"cosmic",level:2},{value:"Declaration",id:"declaration-1",level:3},{value:"Root Application Data",id:"root-application-data",level:3},{value:"Store Provider",id:"store-provider-1",level:3},{value:"Using A Typed <code>useDispatch</code> Hook",id:"using-a-typed-usedispatch-hook",level:3},{value:"Read Store Data With A Typed Hook",id:"read-store-data-with-a-typed-hook",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"state-management",children:"State Management"})}),"\n",(0,o.jsx)(t.h2,{id:"money-tracker",children:"Money Tracker"}),"\n",(0,o.jsx)(t.p,{children:"To separate Angular components using state criteria, one should use the following:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)("i",{children:"Stateless"})," components only have ",(0,o.jsx)(t.code,{children:"@Input"})," and ",(0,o.jsx)(t.code,{children:"@Output"})," fields\nfor data exchange with the parent components"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)("i",{children:"Stateful"})," components\nhave other fields with data, which they get either from the parent components\nor retrieve themselves using injected services."]}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{title:"More info on components in general",type:"info",children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://angular.dev/guide/components",children:"https://angular.dev/guide/components"})})}),"\n",(0,o.jsx)(t.h2,{id:"pomodoro",children:"Pomodoro"}),"\n",(0,o.jsx)(t.h3,{id:"declaration",children:"Declaration"}),"\n",(0,o.jsxs)(t.p,{children:["This project uses the previous version of ",(0,o.jsx)(t.a,{href:"https://redux.js.org",children:"Redux"})," state management:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/App.tsx"',children:"const store = createStore(\n    rootReducer,\n    persistedState,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Where variable ",(0,o.jsx)(t.code,{children:"rootReducer"})," is the root state of the application,\nsee ",(0,o.jsx)(t.code,{children:"src/store/reducer.ts"})]}),"\n",(0,o.jsx)(t.h3,{id:"persistent-state",children:"Persistent State"}),"\n",(0,o.jsxs)(t.p,{children:["Variable ",(0,o.jsx)(t.code,{children:"persistedState"})," is used to store the state data\nin the browser. The following piece of code is used to load the data:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/App.tsx"',children:'let persistedState\nif (typeof window !== "undefined") {\n    const item = localStorage.getItem("reduxState")\n    persistedState = item ? JSON.parse(item, datesReviver) : initialState;\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"...and the code below to save the data:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/App.tsx"',children:"if (typeof window !== 'undefined') {\n  store.subscribe(() => {\n    localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\n  });\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"store-provider",children:"Store Provider"}),"\n",(0,o.jsxs)(t.p,{children:["Pomodoro uses ",(0,o.jsx)(t.code,{children:"Provider"})," class directly:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'jsx title="src/App.tsx"',children:'<Provider store={store}>\n    {mounted && (\n        <BrowserRouter>\n            <Layout>\n                <Header />\n                <Content>\n                    <Routes>\n                        <Route path="/" element={<Main />} />\n                        <Route path="/statistics" element={<Statistics />} />\n                        <Route path="*" element={<NotFound />} />\n                    </Routes>\n                </Content>\n            </Layout>\n        </BrowserRouter>\n    )}\n</Provider>\n'})}),"\n",(0,o.jsxs)(t.h3,{id:"using-usedispatch-hook",children:["Using ",(0,o.jsx)(t.code,{children:"useDispatch"})," hook"]}),"\n",(0,o.jsxs)(t.p,{children:["To update the Redux state, it is required to have action creators ready and the reducers properly\nwritten in ",(0,o.jsx)(t.code,{children:"src/store/reducer.ts"}),". Then functions are imported and components are able\nto use the hook to send data to Redux store:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:'import { useDispatch } from "react-redux";\nimport {\n    updateTaskPomodoro,\n} from "@/store/reducer";\n\n// ...\nexport function SomeComponent() {\n    const dispatch = useDispatch()\n    // ...\n    dispatch(updateTaskPomodoro(currentPomodoro))\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["There function ",(0,o.jsx)(t.code,{children:"updateTaskPomodoro"})," is an example of an action creator:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/store/reducer.ts"',children:"export const updateTaskPomodoro: ActionCreator<AnyAction> = (\n    pomodoro: IPomodoro\n) => ({\n    type: UPDATE_TASK_POMODORO,\n    pomodoro,\n});\n"})}),"\n",(0,o.jsx)(t.h3,{id:"read-store-data",children:"Read Store Data"}),"\n",(0,o.jsxs)(t.p,{children:["To get the data from Redux store Pomodoro uses ",(0,o.jsx)(t.code,{children:"useSelector"})," hook:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/containers/ProjectContainer/ProjectContainer.tsx"',children:'import { useSelector } from "react-redux";\n// ...\nconst currentTask = useSelector<RootState, ITask | undefined>((state) =>\n    state.tasks.length > 0 ? state.tasks[0] : undefined\n);\n'})}),"\n",(0,o.jsx)(t.h3,{id:"deprecation-notice",children:"Deprecation Notice"}),"\n",(0,o.jsx)(t.admonition,{title:"Can be improved",type:"tip",children:(0,o.jsxs)(t.p,{children:["As Redux Toolkit takes place of Redux today, the state manager for Pomodoro\ncan be upgraded with RTK: ",(0,o.jsx)(t.a,{href:"https://redux.js.org/introduction/why-rtk-is-redux-today",children:"Why RTK?"})]})}),"\n",(0,o.jsx)(t.h2,{id:"cosmic",children:"Cosmic"}),"\n",(0,o.jsx)(t.h3,{id:"declaration-1",children:"Declaration"}),"\n",(0,o.jsxs)(t.p,{children:["The new RTK store is declared the following way, note the ",(0,o.jsx)(t.code,{children:"combineSlices"})," function, which is the most\nprominent improvement over the previous Redux, allowing to collect data and RTK Query API slices:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/store.ts"',children:"export const store = configureStore({\n    reducer: combineSlices(rootSlice, cosmicApi),\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware().concat(cosmicApi.middleware)\n})\n"})}),"\n",(0,o.jsx)(t.h3,{id:"root-application-data",children:"Root Application Data"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"rootSlice"})," here is created with ",(0,o.jsx)(t.code,{children:"createSlice"})," function:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/store.ts"',children:'export const rootSlice = createSlice({\n    name: "rootStore",\n    initialState: initialState,\n    reducers: {\n        setSelectedProject: (state: GlobalState, action: PayloadAction<Project>) => {\n            state.selectedProject = action ? action.payload : undefined;\n        },\n        clearSelectedProject: (state: GlobalState) => {\n            state.selectedProject = undefined;\n        }\n    }\n  });\n'})}),"\n",(0,o.jsx)(t.h3,{id:"store-provider-1",children:"Store Provider"}),"\n",(0,o.jsxs)(t.p,{children:["After these basic steps are made, the new wrapper class ",(0,o.jsx)(t.code,{children:"StoreProvider"})," can be declared as follows:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'jsx title="src/lib/StoreProdiver.tsx"',children:"import { Provider } from 'react-redux'\nimport { store } from './store'\n\nexport default function StoreProvider({\n          children\n        }: Readonly<{\n          children: React.ReactNode\n        }>) \n{\n  return <Provider store={store}>{children}</Provider>\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"...and used once to render application routes:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'jsx title="src/main.tsx"',children:'createRoot(document.getElementById(\'root\')!).render(\n    <StrictMode>\n        <StoreProvider>\n            <BrowserRouter>\n                <Routes>\n                    <Route path="/" element={<App />} />\n                    <Route path="*" element={<NotFound />} />\n                </Routes>\n            </BrowserRouter>\n        </StoreProvider>\n    </StrictMode>\n)\n'})}),"\n",(0,o.jsxs)(t.h3,{id:"using-a-typed-usedispatch-hook",children:["Using A Typed ",(0,o.jsx)(t.code,{children:"useDispatch"})," Hook"]}),"\n",(0,o.jsxs)(t.p,{children:["There can be declared a variable with the type of the particular application\ndata ",(0,o.jsx)(t.code,{children:"dispatch"})," hook:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/store.tsx"',children:"export type AppDispatch = typeof store.dispatch\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Use ",(0,o.jsx)(t.code,{children:"AppDispatch"})," type to declare a typed hook:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/lib/lib.ts"',children:"export const useAppDispatch = useDispatch.withTypes<AppDispatch>()\n"})}),"\n",(0,o.jsx)(t.p,{children:"This hook can be used by a component to dispatch a new value to Redux store:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:"jsx",children:'import {useAppDispatch} from "@/lib/lib.ts"\n// ...\nexport function SomeComponent() {\n    const dispatch = useAppDispatch()\n    // ...\n    dispatch(setSelectedProject(project));    \n}\n'})}),"\n",(0,o.jsx)(t.h3,{id:"read-store-data-with-a-typed-hook",children:"Read Store Data With A Typed Hook"}),"\n",(0,o.jsx)(t.p,{children:"There is a typed hook declared to assist in data reading:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:'title="src/store.tsx"',children:"// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type AppState = ReturnType<typeof store.getState>\nexport const useAppSelector = useSelector.withTypes<AppState>()\n"})}),"\n",(0,o.jsxs)(t.p,{children:["It then can be used as follows, conveniently declaring type of the argument ",(0,o.jsx)(t.code,{children:"state"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"const selectedProject: Project = useAppSelector(\n    (state: AppState) => state.rootStore.selectedProject\n)\n"})}),"\n",(0,o.jsx)(t.admonition,{title:"Learning Resources",type:"info",children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://redux.js.org/introduction/learning-resources",children:"https://redux.js.org/introduction/learning-resources"})})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(96540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);