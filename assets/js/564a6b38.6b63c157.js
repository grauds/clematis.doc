"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[3746],{5411:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"web-applications/serving-data/data-transfer-objects","title":"Data Transfer Objects","description":"DTO Pattern","source":"@site/docs/web-applications/serving-data/data-transfer-objects.md","sourceDirName":"web-applications/serving-data","slug":"/web-applications/serving-data/data-transfer-objects","permalink":"/clematis.doc/docs/web-applications/serving-data/data-transfer-objects","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dto","permalink":"/clematis.doc/docs/tags/dto"},{"inline":true,"label":"model-mapper","permalink":"/clematis.doc/docs/tags/model-mapper"},{"inline":true,"label":"domain-driven-design","permalink":"/clematis.doc/docs/tags/domain-driven-design"}],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"tags":["dto","model-mapper","domain-driven-design"]},"sidebar":"tutorialSidebar","previous":{"title":"Serving Data","permalink":"/clematis.doc/docs/web-applications/serving-data/"},"next":{"title":"Data Access Objects","permalink":"/clematis.doc/docs/web-applications/serving-data/data-access-objects"}}');var s=t(74848),r=t(28453);const i={sidebar_position:2,tags:["dto","model-mapper","domain-driven-design"]},o="Data Transfer Objects",l={},c=[{value:"DTO Pattern",id:"dto-pattern",level:2},{value:"Jackson Annotations",id:"jackson-annotations",level:2},{value:"Web Controllers",id:"web-controllers",level:2},{value:"Model Mapper",id:"model-mapper",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"data-transfer-objects",children:"Data Transfer Objects"})}),"\n",(0,s.jsx)(n.h2,{id:"dto-pattern",children:"DTO Pattern"}),"\n",(0,s.jsxs)(n.p,{children:["This pattern is used to convey the data requirements\nfrom ",(0,s.jsx)("i",{children:"client applications"})," to the ",(0,s.jsx)("i",{children:"presentation layer"})," of the backend application.\nDTO is a value-object that hides the implementation of the server-side\nand allows to decouple the domain data access layer from\nthe representational logic of client applications, thus\nadhering to Domain Driven Design principles."]}),"\n",(0,s.jsxs)(n.p,{children:["The DTO classes are kept in ",(0,s.jsx)(n.code,{children:"org.clematis.*.dto"})," packages, the controllers\nare in the different packages ",(0,s.jsx)(n.code,{children:"org.clematis.*.web"}),", for instance:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="src/main/java/org/clematis/cosmic/web/RuntimeController.java"',children:'@RestController\npublic class RuntimeController {\n\n    private final Calculator calculator;\n\n    public RuntimeController(Calculator calculator) {\n        this.calculator = calculator;\n    }\n\n    @PostMapping("/copy")\n    public InputDataDTO copy(@RequestBody CalculationDTO calculationDTO) {\n        return this.calculator.copy(calculationDTO.getProject(), calculationDTO.getInputData());\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["DTO often have their ",(0,s.jsx)(n.a,{href:"../data-querying/cosmic#typed-responses",children:"identical counterparts"})," in the TypeScript world on the other end of the\ncommunication line."]}),"\n",(0,s.jsx)(n.admonition,{title:"Read on",type:"info",children:(0,s.jsxs)(n.p,{children:["An interesting ",(0,s.jsx)(n.a,{href:"https://blog.scottlogic.com/2020/01/03/rethinking-the-java-dto.html",children:"article"}),"\non DTO practice with a follow-up on ",(0,s.jsx)(n.a,{href:"https://blog.scottlogic.com/2018/03/28/domain-driven-design.html",children:"Domain-Driven Design"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"jackson-annotations",children:"Jackson Annotations"}),"\n",(0,s.jsxs)(n.p,{children:["Spring uses\n",(0,s.jsx)(n.a,{href:"https://docs.spring.io/spring-framework/reference/web/webmvc-view/mvc-jackson.html",children:"Jackson"}),"\nto serialize and to deserialize the\nobjects to and from JSON during request processing. ",(0,s.jsx)(n.a,{href:"https://github.com/FasterXML/jackson",children:"Jackson annotations"}),"\nmay help configure the representation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"@EqualsAndHashCode(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@Data\npublic class SampleDTO { \n   private UUID id;\n   private String name;\n   private String year;\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Clematis Web applications use JSON to exchange data that's why Jackson is selected\namong all the pluggable MVC view ",(0,s.jsx)(n.a,{href:"https://docs.spring.io/spring-framework/reference/web/webmvc-view.html",children:"alternatives"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"web-controllers",children:"Web Controllers"}),"\n",(0,s.jsxs)(n.p,{children:["Spring uses ",(0,s.jsx)(n.code,{children:"org.springframework.web.bind.annotation.RestController"})," annotation to\nmark up a controller class. Such REST controllers are working with DTOs to receive\nrequests and to send responses."]}),"\n",(0,s.jsx)(n.p,{children:"For example, a typical controller may look like below:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="src/main/java/org/clematis/mt/web/ExpenseController.java"',children:'//...\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class ExpenseController {\n\n    private final ExpenseRepository expenseRepository;\n\n    public ExpenseController(ExpenseRepository expenseRepository) {\n        this.expenseRepository = expenseRepository;\n    }\n\n    @GetMapping("/api/agentCommodityGroupExpenses")\n    public ResponseEntity<Page<AgentCommodityGroup>> getAgentCommodityGroupExpenses(\n            @RequestParam(value = "code") String code,\n            @RequestParam(value = "moisStart") int moisStart,\n            @RequestParam(value = "anStart") int anStart,\n            @RequestParam(value = "moisEnd") int moisEnd,\n            @RequestParam(value = "anEnd") int anEnd) {\n\n        List<AgentCommodityGroup> groups = this.expenseRepository.getAgentCommodityGroups(\n            code, moisStart, anStart, moisEnd, anEnd\n        );\n        Pageable pageRequest = Pageable.ofSize(groups.size());\n        Page<AgentCommodityGroup> p = new PageImpl<>(groups, pageRequest, groups.size());\n\n        HttpHeaders headers = new HttpHeaders();\n        headers.add("X-Page-Number", String.valueOf(p.getNumber()));\n        headers.add("X-Page-Size", String.valueOf(p.getSize()));\n\n        return ResponseEntity\n                .ok()\n                .headers(headers)\n                .body(p);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Controllers use repositories for complex business scenarios during request processing."}),"\n",(0,s.jsx)(n.h2,{id:"model-mapper",children:"Model Mapper"}),"\n",(0,s.jsx)(n.p,{children:"Mapping data between DTO and DAO layers is a common task due to separation of\nconcerns. In many cases in Clematis applications, this task is straightforward."}),"\n",(0,s.jsxs)(n.p,{children:["A helper library ",(0,s.jsx)(n.a,{href:"https://modelmapper.org/",children:"Model Mapper"})," is used to map data in such cases.\nDependency is like the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gradle",metastring:'title="build.gradle"',children:'dependencies {\n   implementation "org.modelmapper:modelmapper:3.2.0"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Often mapping needs to be customized. For that purpose a type map can be created with\n",(0,s.jsx)(n.code,{children:"modelMapper.createTypeMap"})," method, like below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public ExpenseController(ModelMapper modelMapper,\n                  //...\n) {\n    this.modelMapper = modelMapper;\n    \n    this.createNewProjectTypeMap = this.modelMapper.createTypeMap(\n            ProjectDTO.class, Project.class, "createNewProjectTypeMap"\n        ).addMappings(mapper -> mapper.skip(Project::setId));\n        \n    this.createNewInputDataTypeMap = this.modelMapper.createTypeMap(\n            InputDataDTO.class, InputData.class, "createNewInputDataTypeMap"\n        ).addMappings(mapper -> {\n            mapper.skip(InputData::setId);\n            mapper.skip(InputData::setStatus);\n            mapper.skip(InputData::setFailed);\n        });\n        \n    // ...    \n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this cases ",(0,s.jsx)(n.code,{children:"Project"})," and ",(0,s.jsx)(n.code,{children:"InputData"})," entities will not get some fields during mapping."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);