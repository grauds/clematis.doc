"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[8027],{95289:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"recipe-book/jenkins/migration_to_lxc","title":"Migration to Proxmox LXC","description":"The former Docker-based installation of Jenkins was convenient in terms of dockerized","source":"@site/docs/recipe-book/jenkins/migration_to_lxc.md","sourceDirName":"recipe-book/jenkins","slug":"/recipe-book/jenkins/migration_to_lxc","permalink":"/clematis.doc/docs/recipe-book/jenkins/migration_to_lxc","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"proxmox","permalink":"/clematis.doc/docs/tags/proxmox"},{"inline":true,"label":"jenkins","permalink":"/clematis.doc/docs/tags/jenkins"}],"version":"current","lastUpdatedAt":1754319263000,"frontMatter":{"tags":["proxmox","jenkins"]},"sidebar":"tutorialSidebar","previous":{"title":"Jenkins"},"next":{"title":"React"}}');var s=o(74848),t=o(28453);const a={tags:["proxmox","jenkins"]},r="Migration to Proxmox LXC",l={},c=[{value:"Install From a LXC Template",id:"install-from-a-lxc-template",level:2},{value:"Install Docker",id:"install-docker",level:2},{value:"Generate SSH Key Pair for Yoda",id:"generate-ssh-key-pair-for-yoda",level:2},{value:"Migrate Data",id:"migrate-data",level:2},{value:"Install SSH Private Key in Jenkins",id:"install-ssh-private-key-in-jenkins",level:2},{value:"Update Pipelines",id:"update-pipelines",level:2},{value:"Pipeline With Variables",id:"pipeline-with-variables",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"migration-to-proxmox-lxc",children:"Migration to Proxmox LXC"})}),"\n",(0,s.jsx)(n.p,{children:"The former Docker-based installation of Jenkins was convenient in terms of dockerized\nbuilds and deployment since it was colocated with the applications in the same Docker\nprocess. However, this approach lacks flexibility when it comes to deploying to different\nvirtual machines and to the cloud, since the former Jenkins pipeline was\nonly capable of working with local Docker via Linux command line.\nAlso, heavy builds often take up valuable\napplication resources. So, to be more professional and flexible,\na dedicated server is needed for Jenkins."}),"\n",(0,s.jsx)(n.p,{children:"Proxmox Linux Containers combine proper isolation with a dynamic resources allocation without\na restart, which is perfect for the above goals."}),"\n",(0,s.jsx)(n.h2,{id:"install-from-a-lxc-template",children:"Install From a LXC Template"}),"\n",(0,s.jsxs)(n.p,{children:["I use ",(0,s.jsx)(n.a,{href:"https://www.turnkeylinux.org/jenkins",children:"Turnkey Jenkins"})," to install a preconfigured Debian with Jenkins."]}),"\n",(0,s.jsx)(n.h2,{id:"install-docker",children:"Install Docker"}),"\n",(0,s.jsx)(n.p,{children:"The best option for Debian is to use the short command from Docker.com:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="On Proxmox LXC"',children:"curl -fsSL https://get.docker.com | sh\ndocker version\napt update\nDOCKER_COMPOSE_VERSION=2.24.0\ncurl -SL https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64     -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\ndocker-compose version\nusermod -aG docker jenkins\n"})}),"\n",(0,s.jsx)(n.h2,{id:"generate-ssh-key-pair-for-yoda",children:"Generate SSH Key Pair for Yoda"}),"\n",(0,s.jsx)(n.p,{children:"New Jenkins will use ssh-agent to do the deployments, so it will need an SSH Key Pair for\nYoda. I've made a shortcut and use my own account to do the deployments for Yoda, in general\nit is advised to use a dedicated account."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="On Proxmox LXC"',children:'ssh-keygen -t ed25519 -C "jenkins@yoda-deploy" -f ~/.ssh/yoda_jenkins_key\nssh-copy-id -i ~/.ssh/yoda_jenkins_key.pub anton@[Yoda_IP]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Verify it is installed well (should connect without a password):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="On Proxmox LXC"',children:"ssh -i ~/.ssh/yoda_jenkins_key anton@[Yoda_IP]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"migrate-data",children:"Migrate Data"}),"\n",(0,s.jsx)(n.p,{children:"The data migration may be done the easy way if followed the recipe below. The former Jenkins\ninstallation is a Docker container on Yoda."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Backup Jenkins Data from Docker"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="On Yoda"',children:"docker stop <jenkins_container_name>\ndocker cp <jenkins_container_name>:/var/jenkins_home /tmp/jenkins_backup\n# OR if using a mounted volume:\ncp -r /path/to/jenkins_home /tmp/jenkins_backup\ntar czvf jenkins_backup.tar.gz -C /tmp jenkins_backup\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The output is the archive ",(0,s.jsx)(n.code,{children:"jenkins_backup.tar.gz"}),"."]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Copy Backup to LXC"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="On Yoda"',children:"scp jenkins_backup.tar.gz root@[LXC_IP]:/root\n"})}),"\n",(0,s.jsx)(n.p,{children:"Please check that LXC is not running at this stage. The working directory of the clean\ninstallation has to be moved aside."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="On Proxmox LXC"',children:"systemctl stop jenkins\ncd /var/\nmv lib/jenkins/ lib/_jenkins\ntar xzvf /root/jenkins_backup.tar.gz -C .\nchown -R jenkins:jenkins /var/jenkins_backup/\nmv jenkins_backup/ /var/lib/jenkins\nsystemctl start jenkins\nsystemctl status jenkins\n"})}),"\n",(0,s.jsx)(n.p,{children:"At this point the new installation of Jenkins should be up and running, with all the jobs,\ncredentials and history preserved. However, it won't be deploying to Yoda without changes\nin the pipelines of each project."}),"\n",(0,s.jsx)(n.h2,{id:"install-ssh-private-key-in-jenkins",children:"Install SSH Private Key in Jenkins"}),"\n",(0,s.jsx)(n.p,{children:"In Jenkins:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Go to Manage Jenkins \u2192 Credentials."}),"\n",(0,s.jsx)(n.li,{children:"Choose your scope (e.g., global, or folder-specific)."}),"\n",(0,s.jsx)(n.li,{children:"Add a new SSH Username with private key credential:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"ID: yoda-anton-key (this must match the pipeline)"}),"\n",(0,s.jsx)(n.li,{children:"Username: anton"}),"\n",(0,s.jsx)(n.li,{children:"Private Key: Enter directly or paste from ~/.ssh/yoda_jenkins_key"}),"\n",(0,s.jsx)(n.li,{children:"Description: \u201cYoda SSH Key for Jenkins\u201d"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"update-pipelines",children:"Update Pipelines"}),"\n",(0,s.jsx)(n.p,{children:"Jenkins will build locally, as before, but now the images have to be copied to Yoda and\ndeployed to Docker Compose remotely. Here are the required changes, for example, in a Money Tracker UI project:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jenkins",metastring:"title='Jenkinsfile'",children:"pipeline {\n\n  agent any\n  tools { nodejs \"Node18\" }\n  environment {\n    CERT_DIR = \"${WORKSPACE}/docker/nginx/ssl\"\n    REMOTE_HOST = [Yoda_IP]\n    REMOTE_USER = \"anton\"\n    SSH_DEST = \"${REMOTE_USER}@${REMOTE_HOST}\"\n    REMOTE_APP_DIR = \"/home/anton/deploy/mt\"\n  }\n  \n  //....\n  \n  // export images to archives\n  stage('Export Docker Images') {\n      steps {\n        sh '''\n          mkdir -p docker_export\n          docker save money.tracker.ui.uat > docker_export/uat.tar\n          docker save money.tracker.ui.demo > docker_export/demo.tar\n        '''\n      }\n    }\n\n    // copy images to the deployment server\n    stage('Transfer Files to Yoda') {\n      steps {\n        sshagent (credentials: ['yoda-anton-key']) {\n          sh '''\n            [ -d ~/.ssh ] || mkdir ~/.ssh && chmod 0700 ~/.ssh\n            scp -o StrictHostKeyChecking=no -r \"${CERT_DIR}\" \"${SSH_DEST}:${REMOTE_APP_DIR}/certs\"\n            scp -o StrictHostKeyChecking=no docker_export/*.tar \"${SSH_DEST}:${REMOTE_APP_DIR}/\"\n            scp -o StrictHostKeyChecking=no \"apps/money-tracker-ui/jenkins/docker-compose.yml\" \"${SSH_DEST}:${REMOTE_APP_DIR}/\"\n           '''\n        }\n      }\n    }\n\n    // load to Docker remotely\n    stage('Deploy on Yoda') {\n      steps {\n        sshagent (credentials: ['yoda-anton-key']) {\n          sh '''\n            ssh ${SSH_DEST} \"\n              docker rm -f clematis-money-tracker-ui clematis-money-tracker-ui-demo 2>/dev/null || true && \\\n              docker load < ${REMOTE_APP_DIR}/uat.tar && \\\n              docker load < ${REMOTE_APP_DIR}/demo.tar && \\\n              docker compose -f ${REMOTE_APP_DIR}/docker-compose.yml up -d\n            \"\n          '''\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"These stages can be easily adapted to other projects as well."}),"\n",(0,s.jsx)(n.h3,{id:"pipeline-with-variables",children:"Pipeline With Variables"}),"\n",(0,s.jsx)(n.p,{children:"In some cases Jenkins variables should be merged to the commandline executed on another server. This\ncan be done a bit trickily with export of the variables to environment variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jenkins",metastring:"title='Jenkinsfile'",children:'stage(\'Deploy on Yoda\') {\n  environment {\n    KEYCLOAK_SECRET = credentials(\'MT_API_KEYCLOAK_SECRET\')\n    SPRING_DATASOURCE_PASSWORD = credentials(\'MT_FIREBIRD_PASSWORD\')\n  }\n  steps {\n    sshagent (credentials: [\'yoda-anton-key\']) {\n        sh """\n          ssh ${SSH_DEST} \'\n            cd ${REMOTE_APP_DIR} && \\\n            docker rm -f rm -f clematis-money-tracker-db clematis-money-tracker-db-demo clematis-money-tracker-api clematis-money-tracker-api-demo 2>/dev/null || true && \\\n            export KEYCLOAK_SECRET="${KEYCLOAK_SECRET}" && \\\n            export SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" && \\\n            docker load < clematis.mt.api.tar && \\\n            docker compose -f docker-compose.yml build --build-arg KEYCLOAK_SECRET="${KEYCLOAK_SECRET}" --build-arg SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" && \\\n            docker compose -f docker-compose.yml up -d money-tracker-db money-tracker-db-demo && \\\n            docker compose -f docker-compose.yml up -d --no-deps --build money-tracker-api money-tracker-api-demo\n          \'\n        """\n    }\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var i=o(96540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);