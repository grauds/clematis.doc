"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[425],{43945:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"web-applications/backend-testing","title":"Backend Testing","description":"The basic dependencies for testing are the same for all the projects:","source":"@site/docs/web-applications/backend-testing.md","sourceDirName":"web-applications","slug":"/web-applications/backend-testing","permalink":"/clematis.doc/docs/web-applications/backend-testing","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"junit-jupiter","permalink":"/clematis.doc/docs/tags/junit-jupiter"},{"inline":true,"label":"spotbugs","permalink":"/clematis.doc/docs/tags/spotbugs"},{"inline":true,"label":"lombok","permalink":"/clematis.doc/docs/tags/lombok"},{"inline":true,"label":"rest-assured","permalink":"/clematis.doc/docs/tags/rest-assured"},{"inline":true,"label":"spring-rest-docs","permalink":"/clematis.doc/docs/tags/spring-rest-docs"},{"inline":true,"label":"test-containers","permalink":"/clematis.doc/docs/tags/test-containers"},{"inline":true,"label":"spring-doc-open-api","permalink":"/clematis.doc/docs/tags/spring-doc-open-api"}],"version":"current","lastUpdatedAt":1742842901000,"sidebarPosition":16,"frontMatter":{"sidebar_position":16,"tags":["junit-jupiter","spotbugs","lombok","rest-assured","spring-rest-docs","test-containers","spring-doc-open-api"]},"sidebar":"tutorialSidebar","previous":{"title":"Runtime Management","permalink":"/clematis.doc/docs/web-applications/logging/"},"next":{"title":"Continuous Deployment","permalink":"/clematis.doc/docs/web-applications/continuous-deployment/"}}');var i=t(74848),a=t(28453);const r={sidebar_position:16,tags:["junit-jupiter","spotbugs","lombok","rest-assured","spring-rest-docs","test-containers","spring-doc-open-api"]},o="Backend Testing",l={},c=[{value:"Unit Tests",id:"unit-tests",level:2},{value:"Persistence Tests",id:"persistence-tests",level:2},{value:"Spring Application Tests",id:"spring-application-tests",level:2},{value:"Basic Test Class",id:"basic-test-class",level:3},{value:"In-Memory Database",id:"in-memory-database",level:3},{value:"Spring REST Tests",id:"spring-rest-tests",level:2},{value:"With Spring REST Docs",id:"with-spring-rest-docs",level:3},{value:"REST Test Example",id:"rest-test-example",level:3},{value:"Integration Tests",id:"integration-tests",level:2},{value:"Gradle Setup",id:"gradle-setup",level:3},{value:"With Testcontainers",id:"with-testcontainers",level:3},{value:"Integration Test Example",id:"integration-test-example",level:3},{value:"Coverage",id:"coverage",level:2},{value:"Gradle Setup",id:"gradle-setup-1",level:3},{value:"Docker Build",id:"docker-build",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"backend-testing",children:"Backend Testing"})}),"\n",(0,i.jsx)(n.p,{children:"The basic dependencies for testing are the same for all the projects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",metastring:'title="build.gradle"',children:'dependencies {\n    testAnnotationProcessor \'org.projectlombok:lombok:1.18.34\'\n    testCompileOnly (\n        "org.projectlombok:lombok",\n        "com.github.spotbugs:spotbugs:4.8.4",\n        "com.google.code.findbugs:annotations:3.0.1u2"\n    )\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As for the rest of the code, tests use ",(0,i.jsx)(n.a,{href:"https://projectlombok.org/",children:"Lombok"})," annotations, for\ncompilation time we need ",(0,i.jsx)(n.a,{href:"https://spotbugs.github.io/",children:"SpotBugs"}),"\nand accompanying Findbugs annotations to exclude some cases. Checkstyle will be working\nas it has been configured for the entire codebase earlier."]}),"\n",(0,i.jsx)(n.h2,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,i.jsxs)(n.p,{children:["All the backend projects share the same ",(0,i.jsx)(n.a,{href:"https://junit.org/junit5/",children:"junit5"})," platform for unit tests.\nIt is configured as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",metastring:'title="build.gradle"',children:"dependencies {\n    testImplementation platform('org.junit:junit-bom:5.9.1')\n    testImplementation 'org.junit.jupiter:junit-jupiter'\n}\n\ntest {\n    useJUnitPlatform()\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Only Jupiter engine is used, and ",(0,i.jsx)(n.code,{children:"junit-bom"})," ('bill of materials') manages all the dependencies."]}),"\n",(0,i.jsx)(n.p,{children:"The example of the simple unit tests may be like below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class ValidAnagramTest {\n\n    @Test\n    public void testHash() {\n        Assertions.assertFalse(ValidAnagram.isAnagram("cat", "rat"));\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The imports are from ",(0,i.jsx)(n.code,{children:"org.junit.jupiter"})," package."]}),"\n",(0,i.jsx)(n.h2,{id:"persistence-tests",children:"Persistence Tests"}),"\n",(0,i.jsxs)(n.p,{children:["It is often useful to test the JPA layer in isolation, apart from any other environments.\nHibernate can work with plain Java code, in desktop or command line applications, so we\ncan add, for example, a testing dependency for an ",(0,i.jsx)(n.a,{href:"https://www.h2database.com/html/main.html",children:"H2"}),"\ndatabase and work with it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",metastring:'title="build.gradle"',children:'dependencies {\n    testImplementation "com.h2database:h2"\n}   \n'})}),"\n",(0,i.jsx)(n.p,{children:"The base class for such tests would be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.cfg.Configuration;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\n\n/**\n * For tests without Spring Boot\n */\npublic class PersistenceTests {\n\n    protected static SessionFactory sessionFactory;\n    protected static Session session = null;\n\n    @BeforeAll\n    static void before() {\n        // set up the session factory\n        Configuration configuration = new Configuration();\n\n        // add your JPA model classes\n        // configuration.addAnnotatedClass(...)\n\n        configuration.setProperty("hibernate.dialect", "org.hibernate.dialect.H2Dialect");\n        configuration.setProperty("hibernate.connection.driver_class", "org.h2.Driver");\n        configuration.setProperty("hibernate.connection.url", "jdbc:h2:./src/test/resources/db/mem");\n        configuration.setProperty("hibernate.hbm2ddl.auto", "create");\n        sessionFactory = configuration.buildSessionFactory();\n        session = sessionFactory.openSession();\n    }\n\n    @AfterAll\n    static void after() {\n        session.close();\n        sessionFactory.close();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"It opens a session for all the tests in our case, and tests will use the session to\nwork with in-memory database instance. Such tests are quick and light, so they come in handy\nduring database related development."}),"\n",(0,i.jsx)(n.h2,{id:"spring-application-tests",children:"Spring Application Tests"}),"\n",(0,i.jsx)(n.p,{children:"Spring tests are required to test the application in a server environment.\nThe tests are configured with another Spring Boot starter:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",metastring:'title="build.gradle"',children:"dependencies {\n    testImplementation ('org.springframework.boot:spring-boot-starter-test') {\n        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The junit-vintage engine can be safely excluded from the project dependencies\nas the tests don't need it."}),"\n",(0,i.jsx)(n.h3,{id:"basic-test-class",children:"Basic Test Class"}),"\n",(0,i.jsx)(n.p,{children:"The base class for application tests can be quite simple:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\n\n@SpringBootTest(\n    classes = Application.class,\n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT\n)\n@ActiveProfiles("test")\npublic class ApplicationTests {\n\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"An example test class is below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class SomeRepositoryTest extends ApplicationTests {\n\n    @Autowired\n    private SomeRepository someRepository;\n\n    @SuppressWarnings("checkstyle:MagicNumber")\n    @Test\n    public void testSearchByString() {\n        Page<SomeData> result = someRepository.findDataListBySearchText(\n            "test",\n            Pageable.ofSize(20)\n        );\n        Assertions.assertEquals(1, result.getTotalElements());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"in-memory-database",children:"In-Memory Database"}),"\n",(0,i.jsx)(n.p,{children:"A typical test now can inject any repositories configured to work with a test datasource,\nfor example, the same as in pure persistence tests above:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spring:\n  datasource:\n    url: jdbc:h2:mem:testdb\n    driver-class-name: org.h2.Driver\n    username: sa\n    password: password\n"})}),"\n",(0,i.jsx)(n.h2,{id:"spring-rest-tests",children:"Spring REST Tests"}),"\n",(0,i.jsx)(n.p,{children:"Another important layer of tests is for the application REST API. They are also built\nwith the Spring Boot Test; however, some additional dependencies should be added."}),"\n",(0,i.jsx)(n.h3,{id:"with-spring-rest-docs",children:"With Spring REST Docs"}),"\n",(0,i.jsxs)(n.p,{children:["As described in ",(0,i.jsx)(n.a,{href:"/clematis.doc/docs/web-applications/backend-api#using-spring-rest-docs",children:"Documenting Backend API"}),",\nall Clematis projects are being migrated to REST-assured:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",metastring:'title="build.gradle"',children:"dependencies {\n    testImplementation 'io.rest-assured:rest-assured:5.5.1'\n    testImplementation 'io.rest-assured:json-path:5.5.1'\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The base class for tests becomes a little more complex:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(\n    classes = Application.class, \n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT\n)\n@ActiveProfiles("test")\n@ExtendWith({RestDocumentationExtension.class, SpringExtension.class})\npublic class ApplicationTests {\n\n    @LocalServerPort\n    int port;\n\n    protected RequestSpecification spec;\n\n    @BeforeEach\n    public void setUp(RestDocumentationContextProvider restDocumentation) {\n        RestAssured.port = port;\n        this.spec = new RequestSpecBuilder()\n            .addFilter(documentationConfiguration(restDocumentation))\n            .build();\n    }\n\n    @Test\n    void contextLoads() {}\n\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"rest-test-example",children:"REST Test Example"}),"\n",(0,i.jsxs)(n.p,{children:["For instance, in Cosmic Storage tests now are using ",(0,i.jsx)(n.a,{href:"https://rest-assured.io/",children:"RestAssured"}),"\nto send queries to real endpoints, using some file mocks for multipart file upload:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class DownloadTests extends ApplicationTests {\n\n    public static final String HELLO_WORLD = "Hello, world!";\n\n    public static Resource mockMultipartFile() throws IOException {\n        Path testFile = Files.createTempFile("test", ".txt");\n        Files.writeString(testFile, HELLO_WORLD);\n        return new FileSystemResource(testFile.toFile());\n    }\n\n    @Test\n    public void testFileDownloadDatabase() throws IOException {\n\n        RequestResponse response =\n            given(this.spec).\n                multiPart(mockMultipartFile().getFile()).\n                filter(document("dbupload")).\n            when().\n                post("/api/db/upload").\n            andReturn().\n                body().\n                as(RequestResponse.class);\n\n        Assertions.assertNotNull(response);\n\n        byte[] file\n            = given(this.spec)\n                .filter(document("index"))\n            .when()\n                .get(response.getDownloadUrl())\n            .asByteArray();\n\n        Assertions.assertNotNull(file);\n        Assertions.assertEquals(HELLO_WORLD, new String(file, StandardCharsets.UTF_8));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"These tests help verify DTO classes and their serialization with Jackson, plus\nsuccessful tests generate API documentation."}),"\n",(0,i.jsx)(n.h2,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,i.jsxs)(n.p,{children:["Setting up tests with the database which is to be used in production is a bit more\nchallenging; given that, for example, an instance of ",(0,i.jsx)(n.a,{href:"https://www.mysql.com/",children:"MySQL"}),"\ndatabase should be started somewhere. Ideally, this stage should also be runnable\nin a Jenkins pipeline. Clematis API applications use\n",(0,i.jsx)(n.a,{href:"https://testcontainers.com/",children:"Testcontainers"})," to do the job."]}),"\n",(0,i.jsx)(n.h3,{id:"gradle-setup",children:"Gradle Setup"}),"\n",(0,i.jsx)(n.p,{children:"There are some dependencies to be added to a project to start with Testcontainers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",metastring:'title="build.gradle"',children:"dependencies {\n    testImplementation 'org.springframework.boot:spring-boot-testcontainers'\n    testImplementation 'org.testcontainers:junit-jupiter'\n    testImplementation 'org.testcontainers:mysql'\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The dependencies above add throwaway instances of MySQL database. However, the ideal option\nwould be to put integration tests aside of unit tests, i.e., to configure another\n",(0,i.jsx)(n.a,{href:"https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests",children:"source root in the Gradle project"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",metastring:'title="build.gradle"',children:"sourceSets {\n    intTest {\n        compileClasspath += sourceSets.main.output\n        runtimeClasspath += sourceSets.main.output\n    }\n}\n\nconfigurations {\n    intTestCompileOnly.extendsFrom testCompileOnly\n    intTestImplementation.extendsFrom testImplementation\n    intTestRuntimeOnly.extendsFrom testRuntimeOnly\n}\n\ndependencies {\n    intTestAnnotationProcessor 'org.projectlombok:lombok:1.18.34'\n\n    intTestImplementation 'io.rest-assured:rest-assured'\n    intTestImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'\n    intTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'\n}\n\nidea {\n    module {\n        testSources.from(sourceSets.intTest.java.srcDirs)\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The dependencies above may be different, they are there just to demo that they are appendable\nto ones imported from the test source root."}),"\n",(0,i.jsx)(n.h3,{id:"with-testcontainers",children:"With Testcontainers"}),"\n",(0,i.jsx)(n.p,{children:"The next step is to add a database instance to the integration tests. There are some tricky moments,\nwhich may not be quite visible from the documentation. Let's start with a basic test class:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Testcontainers\n@Log\npublic class ApplicationIntegrationTest {\n    static final Network SHARED_NETWORK = Network.newNetwork();\n    @Container\n    private static final GenericContainer<?> CONTAINER;\n    private static final DockerImageName MYSQL_IMAGE = DockerImageName.parse("mysql:8.0.36");\n    @Container\n    private static final MySQLContainer<?> MYSQL_CONTAINER;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"First, the network, the generic container and the image are specified in the test base class.\nThe second step is to create and start the database instance, and after that to start the\napplication container instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Testcontainers\n@Log\npublic class ApplicationIntegrationTest {\n   //...\n   static {\n        MYSQL_CONTAINER = new MySQLContainer<>(MYSQL_IMAGE)\n            .withUsername("clematis")\n            .withPassword("password")\n            .withNetwork(SHARED_NETWORK)\n            .withNetworkAliases("mysql");\n        MYSQL_CONTAINER.start();\n\n        CONTAINER\n            = new GenericContainer<>(\n                new ImageFromDockerfile()\n                .withFileFromClasspath("Dockerfile", "Dockerfile_int")\n                .withFileFromClasspath("Makefile", "Makefile")\n                .withFileFromFile("app.jar",\n                    new File("build/libs/app.jar")\n                )\n        ).withNetwork(SHARED_NETWORK)\n            .dependsOn(MYSQL_CONTAINER)\n            .withEnv("SPRING_DATASOURCE_URL", "jdbc:mysql://mysql:"\n                + MYSQL_PORT\n                + "/"\n                + MYSQL_CONTAINER.getDatabaseName()\n            )\n            .withEnv("SPRING_DATASOURCE_USERNAME", MYSQL_CONTAINER.getUsername())\n            .withEnv("SPRING_DATASOURCE_PASSWORD", MYSQL_CONTAINER.getPassword())\n            .withEnv("JMXMP_HOST", "localhost")\n            .withEnv("JMXMP_PORT", "5005")\n            .withLogConsumer(LogConsumer::log)\n            .withExposedPorts(8080)\n            .waitingFor(Wait\n                .defaultWaitStrategy()\n                .withStartupTimeout(Duration.ofSeconds(60))\n            );\n        CONTAINER.start();\n    }  \n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The fragment above creates a ",(0,i.jsx)(n.a,{href:"https://java.testcontainers.org/features/creating_container/",children:"generic container"}),"\nbased on the Docker image which can be ",(0,i.jsxs)(n.a,{href:"https://java.testcontainers.org/features/creating_images/",children:[(0,i.jsx)("i",{children:"dynamically"})," built"]}),"\nfrom the project Dockerfile. After that, the application container is being put on the same\nnetwork as the MySQL container, and what is most important for successful connection, the\naddress of the database is configured by the test via ",(0,i.jsx)(n.code,{children:"withEnv"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"The last part is to communicate the database address to the Spring application within the\napplication container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Testcontainers\n@Log\npublic class ApplicationIntegrationTest {\n    \n    //...\n    \n    @DynamicPropertySource\n    static void init(DynamicPropertyRegistry registry) {\n        registry.add("spring.datasource.url", MYSQL_CONTAINER::getJdbcUrl);\n        registry.add("spring.datasource.password", MYSQL_CONTAINER::getPassword);\n        registry.add("spring.datasource.username", MYSQL_CONTAINER::getUsername);\n    }    \n}    \n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DynamicPropertyRegistry"})," can be configured for that and\n",(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-framework/reference/testing/annotations/integration-spring/annotation-dynamicpropertysource.html",children:"Spring will understand"}),"\nit when the application tries to read datasource URL and credentials."]}),"\n",(0,i.jsx)(n.h3,{id:"integration-test-example",children:"Integration Test Example"}),"\n",(0,i.jsxs)(n.p,{children:["The last piece of the puzzle is that the integration tests use ",(0,i.jsx)(n.code,{children:"CONTAINER.getMappedPort(8080)"}),"\nport to send requests, for example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testInfo() {\n    given()\n        .port(CONTAINER.getMappedPort(8080))\n        .when()\n        .get("/info")\n        .then()\n        .statusCode(200);\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This is done this way because we've created the application container with internal\nport 8080 exposed to the outer network, i.e. ",(0,i.jsx)(n.code,{children:"withExposedPorts(8080)"}),", and now the test\nneeds to know which external random port has been allocated,\ni.e. ",(0,i.jsx)(n.code,{children:"getMappedPort(8080)"})," will tell us."]}),"\n",(0,i.jsx)(n.admonition,{title:"Useful link",type:"info",children:(0,i.jsxs)(n.p,{children:["More info on ",(0,i.jsx)(n.a,{href:"https://java.testcontainers.org/features/networking/",children:"Testcontainers networking"}),"."]})}),"\n",(0,i.jsx)(n.admonition,{title:"Gherkin integration",type:"tip",children:(0,i.jsxs)(n.p,{children:["The integration tests can contribute to the process of collection\nand validation of the ",(0,i.jsx)(n.a,{href:"/clematis.doc/docs/web-applications/cucumber-playwright#testing-a-feature",children:"requirements"})," if the\nfeature is an endpoint."]})}),"\n",(0,i.jsx)(n.h2,{id:"coverage",children:"Coverage"}),"\n",(0,i.jsxs)(n.p,{children:["All tests, except for integration ones, measure coverage in the same terms as\nclient side applications, for example, ",(0,i.jsx)(n.a,{href:"/clematis.doc/docs/web-applications/testing/pomodoro#coverage",children:"Pomodoro"}),".\nThe coverage report is then can be\n",(0,i.jsx)(n.a,{href:"/clematis.doc/docs/web-applications/continuous-deployment/#coverage-report",children:"shown by Jenkins"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"gradle-setup-1",children:"Gradle Setup"}),"\n",(0,i.jsxs)(n.p,{children:["Clematis APIs use ",(0,i.jsx)(n.a,{href:"https://docs.gradle.org/current/userguide/jacoco_plugin.html",children:"Gradle JaCoCo plugin"}),"\nand configure ",(0,i.jsx)(n.code,{children:"jacocoTestReport"})," as a final stage for ",(0,i.jsx)(n.code,{children:"test"})," task:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",metastring:'title="build.gradle"',children:'plugins {\n    id "jacoco"\n}\n\ntest {\n    outputs.dir snippetsDir\n    useJUnitPlatform()\n    testLogging.showStandardStreams = true\n    finalizedBy jacocoTestReport\n    jacoco {\n        destinationFile = file("jacoco/jacocoTest.exec")\n        classDumpDir = file("jacoco/classpathdumps")\n    }\n}\n\njacocoTestReport {\n    dependsOn test // tests are required to run before generating the report\n    reports {\n        xml.required = true\n        csv.required = false\n        html.outputLocation = file(\'jacoco/html\')\n        xml.outputLocation = file(\'jacoco/jacoco.xml\')\n    }\n    subprojects.each {\n        sourceSets it.sourceSets.main\n    }\n    executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"docker-build",children:"Docker Build"}),"\n",(0,i.jsx)(n.p,{children:"Worth noting, that the directory with the JaCoCo reports is copied from the Docker build\nstage is the build and the tests for the project run in a Docker build stage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-docker",children:"# ------------------------------------------------------------------------------\n# COPY COVERAGE STAGE (after build)\n# ------------------------------------------------------------------------------\n\nFROM scratch AS jacoco\nCOPY --from=build /workspace/coverage .\n"})}),"\n",(0,i.jsx)(n.p,{children:"Jenkins will work with this data later:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{\n    //...\n    stage('Publish tests') {\n        steps {\n            recordCoverage(tools: [[parser: 'JACOCO']],\n                    id: 'jacoco', name: 'JaCoCo Coverage',\n                    sourceCodeRetention: 'EVERY_BUILD',\n                    qualityGates: [\n                            [threshold: 60.0, metric: 'LINE', baseline: 'PROJECT', unstable: true],\n                            [threshold: 60.0, metric: 'BRANCH', baseline: 'PROJECT', unstable: true]])\n        }\n    }\n    //...\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"More info on Jenkins pipeline is in the next chapter."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);