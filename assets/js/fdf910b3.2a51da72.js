"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[5356],{29157:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"recipe-book/testing/to-be-true","title":"The Difference Between toBe, toBeTruthy and toBeTrue","description":"These methods are coming from the Jasmine testing framework.","source":"@site/docs/recipe-book/testing/to-be-true.md","sourceDirName":"recipe-book/testing","slug":"/recipe-book/testing/to-be-true","permalink":"/clematis.doc/docs/recipe-book/testing/to-be-true","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"jasmine","permalink":"/clematis.doc/docs/tags/jasmine"},{"inline":true,"label":"testing","permalink":"/clematis.doc/docs/tags/testing"}],"version":"current","lastUpdatedAt":1748339770000,"frontMatter":{"tags":["jasmine","testing"]},"sidebar":"tutorialSidebar","previous":{"title":"Testing"},"next":{"title":"Using VSCode Test Explorer For TDD","permalink":"/clematis.doc/docs/recipe-book/testing/vscode-test-explorer"}}');var s=n(74848),o=n(28453);const i={tags:["jasmine","testing"]},a="The Difference Between toBe, toBeTruthy and toBeTrue",c={},l=[{value:"toBe",id:"tobe",level:2},{value:"toBeTruthy",id:"tobetruthy",level:2},{value:"toBeTrue",id:"tobetrue",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"the-difference-between-tobe-tobetruthy-and-tobetrue",children:"The Difference Between toBe, toBeTruthy and toBeTrue"})}),"\n",(0,s.jsxs)(t.p,{children:["These methods are coming from the ",(0,s.jsx)(t.a,{href:"https://jasmine.github.io",children:"Jasmine"})," testing framework."]}),"\n",(0,s.jsx)(t.h2,{id:"tobe",children:"toBe"}),"\n",(0,s.jsxs)(t.p,{children:["Jasmine defines ",(0,s.jsx)(t.a,{href:"https://github.com/jasmine/jasmine/blob/4097718b6682f643833f5435b63e4f590f22919f/lib/jasmine-core/jasmine.js#L2779",children:"toBe"}),"\nas:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"getJasmineRequireObj().toBe = function() {\n  function toBe() {\n    return {\n      compare: function(actual, expected) {\n        return {\n          pass: actual === expected\n        };\n      }\n    };\n  }\n\n  return toBe;\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This check is passed only if the variables comply with the following\n",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality#description",children:"conditions"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"tobetruthy",children:"toBeTruthy"}),"\n",(0,s.jsxs)(t.p,{children:["Jasmine defines ",(0,s.jsx)(t.a,{href:"https://github.com/jasmine/jasmine/blob/4097718b6682f643833f5435b63e4f590f22919f/lib/jasmine-core/jasmine.js#L2908",children:"toBeTruthy"}),"\nas:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"getJasmineRequireObj().toBeTruthy = function() {\n\n  function toBeTruthy() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: !!actual\n        };\n      }\n    };\n  }\n\n  return toBeTruthy;\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["A value is truthy if the ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion",children:"coercion"}),"\nof the given value to a boolean yields the value true."]}),"\n",(0,s.jsx)(t.h2,{id:"tobetrue",children:"toBeTrue"}),"\n",(0,s.jsxs)(t.p,{children:["Jasmine defines ",(0,s.jsx)(t.a,{href:"https://github.com/jasmine/jasmine/blob/2a7a1577139196d9f678a1749f640f8efbf7402b/lib/jasmine-core/jasmine.js#L6091",children:"toBeTrue"}),"\nas follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"getJasmineRequireObj().toBeTrue = function() {\n  /**\n   * {@link expect} the actual value to be `true`.\n   * @function\n   * @name matchers#toBeTrue\n   * @since 3.5.0\n   * @example\n   * expect(result).toBeTrue();\n   */\n  function toBeTrue() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: actual === true\n        };\n      }\n    };\n  }\n\n  return toBeTrue;\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The difference with ",(0,s.jsx)(t.code,{children:"toBeTrue"})," and ",(0,s.jsx)(t.code,{children:"toBe"})," is\nthat ",(0,s.jsx)(t.code,{children:"toBeTrue"})," tests the argument for the Boolean type."]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(96540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);