"use strict";(self.webpackChunkclematis_doc=self.webpackChunkclematis_doc||[]).push([[9953],{57220:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"web-applications/cucumber-playwright","title":"Cucumber And Playwright","description":"The first step is to have Cucumber and Playwright installed in the project:","source":"@site/docs/web-applications/cucumber-playwright.md","sourceDirName":"web-applications","slug":"/web-applications/cucumber-playwright","permalink":"/clematis.doc/docs/web-applications/cucumber-playwright","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"cucumber","permalink":"/clematis.doc/docs/tags/cucumber"},{"inline":true,"label":"playwright","permalink":"/clematis.doc/docs/tags/playwright"},{"inline":true,"label":"jenkins","permalink":"/clematis.doc/docs/tags/jenkins"}],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"tags":["cucumber","playwright","jenkins"]},"sidebar":"tutorialSidebar","previous":{"title":"Code Standards","permalink":"/clematis.doc/docs/web-applications/code-standards"},"next":{"title":"Styling","permalink":"/clematis.doc/docs/web-applications/styling"}}');var a=n(74848),r=n(28453);const i={sidebar_position:5,tags:["cucumber","playwright","jenkins"]},o="Cucumber And Playwright",c={},l=[{value:"A Folder For Tests",id:"a-folder-for-tests",level:2},{value:"Cucumber Configuration",id:"cucumber-configuration",level:2},{value:"Testing A Feature",id:"testing-a-feature",level:2},{value:"Classes For Playwright",id:"classes-for-playwright",level:2},{value:"Test Reports",id:"test-reports",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"cucumber-and-playwright",children:"Cucumber And Playwright"})}),"\n",(0,a.jsxs)(t.p,{children:["The first step is to have Cucumber and ",(0,a.jsx)(t.a,{href:"https://playwright.dev/",children:"Playwright"})," installed in the project:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "devDependencies": {\n    "@cucumber/cucumber": "^11.2.0",\n    "@playwright/test": "^1.47.2",\n    "ts-node": "^10.9.2"\n  }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"The next step is to install/update a Playwright collection of browsers:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx playwright install\n"})}),"\n",(0,a.jsx)(t.p,{children:"Now everything is ready to create steps to bind Cucumber features and their scenarios to Playwright tests."}),"\n",(0,a.jsx)(t.h2,{id:"a-folder-for-tests",children:"A Folder For Tests"}),"\n",(0,a.jsx)(t.p,{children:"It is convenient to have another root folder for tests with all the initial subfolders:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"tests\n \u251c\u2500 features\n \u251c\u2500 steps\n \u2502 ...\ncucumber.js\n"})}),"\n",(0,a.jsx)(t.h2,{id:"cucumber-configuration",children:"Cucumber Configuration"}),"\n",(0,a.jsxs)(t.p,{children:["We also add a ",(0,a.jsx)(t.a,{href:"https://github.com/cucumber/cucumber-js/blob/HEAD/docs/configuration.md#finding-your-features",children:"Cucumber configuration"}),"\nfile at the root of the project, like below:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="cucumber.js"',children:"module.exports = {\n    default: {\n        paths: [\n            'tests/features/**/*.{feature,feature.md}'\n        ],\n        require: [\n            'tests/steps/**/*.ts'\n        ],\n        requireModule: [\n            'ts-node/register'\n        ],\n        format: ['progress', ['html', 'cucumber-report.html']],\n        timeout: 60000,\n    },\n};\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Also, a basic command is added to ",(0,a.jsx)(t.code,{children:"package.json"})," to launch the testing:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "scripts": {    \n    "cucumber": "npx cucumber-js"\n  }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"testing-a-feature",children:"Testing A Feature"}),"\n",(0,a.jsxs)(t.p,{children:["A feature (example for Pomodoro) is described used Gherkin notation during the process of\ncollection of requirements from a customer/stakeholder. The resulting file is put into\nthe ",(0,a.jsx)(t.code,{children:"features"})," folder:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-gherkin",metastring:'title="tests/features/create-new-task.feature"',children:'Feature: Create new task\n  Scenario: Test - Create new task\n    Given HomePage open page\n    Given HomePage has a form NewTask\n    Given NewTask form has a text field\n    Given NewTask form has a submit button\n    Then User provides the name for the new task "Test"\n    And User clicks the submit button\n    When A new task is created\n    And The new task is displayed in the list\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Next step is to create a function for every line of the description and put it into\nanother file in ",(0,a.jsx)(t.code,{children:"steps"})," directory. Here is the full text of the example test\nscenario:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="tests/steps/create-new-task-steps.ts"',children:"import { AfterAll, BeforeAll, Given, Then, When } from '@cucumber/cucumber';\nimport { chromium, expect, Browser, BrowserContext, Page } from '@playwright/test';\n\nimport { HomePage } from '../pages/HomePage';\nimport { testUrl } from '../constants';\n\nlet browser: Browser;\nlet context: BrowserContext;\nlet page: Page;\nlet homePage: HomePage;\n\nBeforeAll(async () => {\n  browser = await chromium.launch({ headless: false });\n  context = await browser.newContext();\n  page = await context.newPage();\n  homePage = new HomePage(page);\n})\n\nAfterAll(async () => {\n    if (page) await page.close();\n    if (context) await context.close();\n    if (browser) await browser.close();\n});\n\nGiven('HomePage open page', async function() {\n  await homePage.navigateTo(testUrl)\n});\n\nGiven('HomePage has a form NewTask', function () {\n  expect(page.getByRole('form')).toBeTruthy();\n});\n\nGiven('NewTask form has a text field', async function () {\n  expect(page.getByPlaceholder('\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438')).toBeTruthy();\n});\n\nGiven('NewTask form has a submit button', async function () {\n  expect(page.getByPlaceholder('\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c')).toBeTruthy();\n});\n\nThen('User provides the name for the new task {string}',\n  async function (taskName: string) {\n\n  await page.getByPlaceholder('\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438').click();\n  await page.getByPlaceholder('\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438').fill(taskName);\n});\n\nThen('User clicks the submit button', async function () {\n  await page.getByRole('button', { name: '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c' }).click();\n});\n\nWhen('A new task is created', async function () {\n  await expect(page.getByText('Test \ud83c\udf45 ')).toBeVisible();\n});\n\nWhen('The new task is displayed in the list', async function () {\n  await expect(page.getByText('Test \ud83c\udf45 ')).toBeVisible();\n});\n\n"})}),"\n",(0,a.jsxs)(t.p,{children:["It is important to follow textual descriptions in the tests, ",(0,a.jsx)(t.code,{children:"cucumber-js"})," will\nthrow an error otherwise."]}),"\n",(0,a.jsx)(t.p,{children:"Playwright is starting its part inside the tests functions, providing jest-like\nsyntax and validating the elements and their content."}),"\n",(0,a.jsx)(t.h2,{id:"classes-for-playwright",children:"Classes For Playwright"}),"\n",(0,a.jsx)(t.p,{children:"The example above uses page classes, created for the tests only. It is convenient\nto have one base class with base search functions in it plus more classes for\nthe other pages. For example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="tests/pages/AbstractPage.ts"',children:"import { Page } from '@playwright/test';\n\nexport abstract class AbstractPage {\n\n  // a page from Playwright\n  protected page: Page;\n\n  private static BASIC_XPATH = {\n    heading: \"//h2[text()='%s']\",\n    label: \"//label[text()='%s']\"\n  }\n\n  constructor(page: Page) {\n    this.page = page;\n  }\n\n  async navigateTo(url: string) {\n    await this.page.goto(url, {\n      waitUntil: 'domcontentloaded',\n    });\n  }\n\n  async findElement(selector: string) {\n    await this.page.waitForSelector(selector);\n  }\n\n  async verifyElementExists(selector: string) {\n    try {\n      await this.page.waitForSelector(selector,\n        {\n          state: 'visible',\n          timeout: 5000\n        });\n      return this.page.locator(selector);\n    } catch (error) {\n      throw new Error(`Unable to verify element with selector \"${selector}\", not found: ${error}`);\n    }\n  }\n\n  async enterText(selector: string, text: string) {\n    await this.verifyElementExists(selector)\n    await this.page.fill(selector, text);\n  }\n  // ... more functions specific to the basic page search \n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"While another class for the real home page would be like:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="tests/pages/HomePage.ts"',children:"import { AbstractPage } from './AbstractPage';\n\nexport class HomePage extends AbstractPage {\n\n  private static HOME_PAGE_XPATH = {\n    newTaskNameInput: \"input[name='']\"\n  }\n\n  async enterTaskName(taskName: string) {\n    await this.enterText(HomePage.HOME_PAGE_XPATH.newTaskNameInput, taskName);\n  }\n // ... more functions specific to the home page\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"With more and more tests covering all the aspects of the application, the number\nof functions needed will grow fast. This class hierarchy reflects the hierarchy of\npages in the application and allows to re-use testing code."}),"\n",(0,a.jsx)(t.h2,{id:"test-reports",children:"Test Reports"}),"\n",(0,a.jsx)(t.p,{children:"Clematis projects prefer reports compatible with Jenkins, so in\nthis case it would be sensible to have it in JSON format."}),"\n",(0,a.jsx)(t.p,{children:"The following line in the Cucumber configuration file is responsible\nfor this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",metastring:"lines",children:"{\n  format: [    \n    [\n      'html',\n      'cucumber-report.html'\n    ]\n  ]\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Jenkins will need ",(0,a.jsx)(t.a,{href:"https://plugins.jenkins.io/cucumber-reports/",children:"Cucumber reports"}),"\nplugin installed to display the results."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(96540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);